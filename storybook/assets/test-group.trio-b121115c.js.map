{"version":3,"file":"test-group.trio-b121115c.js","sources":["../../../examples/dist/geometric-queries/ray-intersect/test-group.substance.js","../../../examples/dist/geometric-queries/ray-intersect/ray-intersect-group.style.js","../../../examples/dist/geometric-queries/ray-intersect/test-group.trio.js"],"sourcesContent":["export default \"-- For each ray, draws the first intersection with any shape in the group G.\\n\\nRay r1\\nRay r2\\nRay r3\\nRay r4\\nRay r5\\nRay r6\\nRay r7\\nRay r8\\nRay r9\\nRay r10\\nRay r11\\nRay r12\\nRay r13\\nRay r14\\nRay r15\\nRay r16\\nRay r17\\nRay r18\\nRay r19\\nRay r20\\nRay r21\\nRay r22\\nRay r23\\nRay r24\\nRay r25\\nRay r26\\nRay r27\\nRay r28\\nRay r29\\nRay r30\\nRay r31\\nRay r32\\nRay r33\\nRay r34\\nRay r35\\nRay r36\\nRay r37\\nRay r38\\nRay r39\\nRay r40\\nRay r41\\nRay r42\\nRay r43\\nRay r44\\nRay r45\\nRay r46\\nRay r47\\nRay r48\\nRay r49\\nRay r50\\nRay r51\\nRay r52\\nRay r53\\nRay r54\\nRay r55\\nRay r56\\nRay r57\\nRay r58\\nRay r59\\nRay r60\\nRay r61\\nRay r62\\nRay r63\\nRay r64\\nRay r65\\nRay r66\\nRay r67\\nRay r68\\nRay r69\\nRay r70\\nRay r71\\nRay r72\\nRay r73\\nRay r74\\nRay r75\\nRay r76\\nRay r77\\nRay r78\\nRay r79\\nRay r80\\nRay r81\\nRay r82\\nRay r83\\nRay r84\\nRay r85\\nRay r86\\nRay r87\\nRay r88\\nRay r89\\nRay r90\\nRay r91\\nRay r92\\nRay r93\\nRay r94\\nRay r95\\nRay r96\\nRay r97\\nRay r98\\nRay r99\\nRay r100\\n\\nGroup G\\n\";\n//# sourceMappingURL=test-group.substance.js.map","import { makeResolver } from \"../../resolver.js\";\nexport const resolver = makeResolver(\"geometric-queries/ray-intersect\");\nexport default \"canvas {\\n   width = 800\\n   height = 700\\n}\\n\\n-- Rules for drawing each type of shape\\n\\nforall Ray r {\\n   scalar theta = random( 4, 5.42 )\\n   vec2 r.pos = (0,canvas.height/2 - 10.)\\n   vec2 r.vec = [ cos(theta), sin(theta) ]\\n\\n   shape r.icon = Circle {\\n      center: r.pos\\n      r: 5\\n      fillColor: #000000ff\\n   } \\n}\\n\\nforall Group G {\\n   shape G.line = Line {\\n      start: (-canvas.width/2,-canvas.height/2 + 10)\\n      end: (canvas.width/2,-canvas.height/2 + 10)\\n      strokeWidth: 5\\n   }\\n   shape G.rectangle = Rectangle {\\n      center: (?, ?)\\n      width: random(40,100)\\n      height: random(40,100)\\n      strokeWidth: 1\\n   }\\n   shape G.circle = Circle {\\n      center: (?,?)\\n      r: random(40,80)\\n   }\\n   shape G.ellipse = Ellipse {\\n      center: (?,?)\\n      rx: random(60,100)\\n      ry: random(60,100)\\n   }\\n\\n   vec2 p0 = (?,?)\\n   vec2 p1 = (?,?)\\n   vec2 p2 = (?,?)\\n   shape G.polygon = Polygon {\\n      points: [ p0, p1, p2 ]\\n   }\\n   vec2 e01 = p1-p0\\n   vec2 e12 = p2-p1\\n   vec2 e20 = p0-p2\\n   ensure angleBetween( e01, -e12 ) > toRadians(30)\\n   ensure angleBetween( e12, -e20 ) > toRadians(30)\\n   ensure angleBetween( e20, -e01 ) > toRadians(30)\\n   ensure abs(cross2D( e01, -e12 )) > 50\\n\\n   shape G.icon = Group {\\n      shapes: [ G.line, G.rectangle, G.circle, G.ellipse, G.polygon ]\\n   }\\n\\n   ensure disjoint( G.line, G.rectangle )\\n   ensure disjoint( G.line, G.circle )\\n   ensure disjoint( G.line, G.ellipse )\\n   ensure disjoint( G.line, G.polygon )\\n   ensure disjoint( G.rectangle, G.circle )\\n   ensure disjoint( G.rectangle, G.ellipse )\\n   ensure disjoint( G.rectangle, G.polygon )\\n   ensure disjoint( G.circle, G.ellipse )\\n   ensure disjoint( G.circle, G.polygon )\\n   ensure disjoint( G.ellipse, G.polygon )\\n}\\n\\nforall Ray r; Shape S\\n{\\n   vec2 p = rayIntersect( S.icon, r.pos, r.vec )\\n\\n   shape intersectDot = Circle {\\n      r: r.icon.r / 2\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n\\n   shape line = Line {\\n      start: r.pos\\n      end: p\\n      strokeColor: rgba(1,.5,0,.1)\\n      strokeWidth: 3.5\\n      ensureOnCanvas: false\\n   }\\n\\n   layer intersectDot below r.icon\\n   layer intersectDot above S.icon\\n   layer intersectDot above line\\n}\\n\\n\\n\";\n//# sourceMappingURL=ray-intersect-group.style.js.map","import substance from \"./test-group.substance.js\";\nimport style0, { resolver as resolver0 } from \"./ray-intersect-group.style.js\";\nimport domain from \"./ray-intersect.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"AntiguaSalmon4454\",\n    excludeWarnings: [\"BBoxApproximationWarning\"]\n};\n//# sourceMappingURL=test-group.trio.js.map"],"names":["substance","resolver","makeResolver","style0","testGroup_trio","resolver0","domain"],"mappings":"+HAAA,MAAAA,EAAea,iCAAiC,EACtEC,EAAeoBACX,gBAAiB,CAAC,0BAA0B,CAChD"}