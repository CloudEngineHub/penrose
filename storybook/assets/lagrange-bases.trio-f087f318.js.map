{"version":3,"file":"lagrange-bases.trio-f087f318.js","sources":["../../../examples/dist/lagrange-bases/example.substance.js","../../../examples/dist/lagrange-bases/lagrange-bases.style.js","../../../examples/dist/lagrange-bases/lagrange-bases.domain.js","../../../examples/dist/lagrange-bases/lagrange-bases.trio.js"],"sourcesContent":["export default \"Node a, b, c, d\\nNode u, v, x, y, z\\nElement t2 := QuadraticTriangle( a, b, c, x, y, z )\\nElement e := QuadraticTriangle( b, a, d, x, u, v )\\n\\nLabel a $p_i$\\nLabel b $p_j$\\nLabel c $p_k$\\nLabel d $p_l$\\nLabel x $m_{ij}$\\nLabel y $m_{jk}$\\nLabel z $m_{ki}$\\nLabel u $m_{il}$\\nLabel v $m_{jl}$\\n\\n\";\n//# sourceMappingURL=example.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"lagrange-bases\");\nexport default \"canvas {\\n   width = 240\\n   height = 180\\n}\\n\\nGlobal {\\n   -- background color\\n   shape box = Rectangle {\\n      fillColor: rgba( .9, 1, .9, 1 )\\n      center: (0,0)\\n      width: canvas.width\\n      height: canvas.height\\n      ensureOnCanvas: false\\n   }\\n\\n   scalar dotSize = 2.5\\n   scalar smallDotSize = 2.\\n   scalar edgeWidth = 1.5\\n   string labelSize = \\\"10px\\\"\\n}\\n\\nColors {\\n   color black = rgba(0,0,0,1)\\n   color white = rgba(1,1,1,1)\\n   color lightGray = rgba(0,0,0,.1)\\n}\\n\\nforall Node x {\\n   shape x.icon = Circle {\\n      center: (?,?)\\n      r: Global.dotSize\\n      fillColor: Colors.black\\n   }\\n\\n   layer x.icon above Global.box\\n}\\n\\n-- put text near a node if it has a label\\nforall Node x\\nwhere x has math label {\\n\\n   -- direction of label relative to the node location\\n   -- (as an angle in radians)\\n   scalar theta = ?\\n\\n   x.labelText = Equation {\\n      center: x.icon.center + 10.*unitVector(theta)\\n      string: x.label\\n      fontSize: Global.labelSize\\n      fillColor: Colors.black\\n   }\\n}\\n\\nforall Element e; Node vi; Node vj; Node vk\\nwhere e := LinearTriangle( vi, vj, vk ) {\\n\\n   -- grab node locations (for convenience)\\n   vec2 pi = vi.icon.center\\n   vec2 pj = vj.icon.center\\n   vec2 pk = vk.icon.center\\n\\n   -- draw edges as straight lines\\n   shape e.curveIJ = Line {\\n      start: pi\\n      end: pj\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveJK = Line {\\n      start: pj\\n      end: pk\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveKI = Line {\\n      start: pk\\n      end: pi\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n\\n   -- make sure triangles are reasonably nice by ensuring\\n   -- the signed corner angles aren't too small (we don't\\n   -- need to worry about the final angle since the\\n   -- angles of any triangle sum to π\\n   scalar minAngle = toRadians( 30. )\\n   ensure greaterThan( angleFrom(pj-pi,pk-pi), minAngle )\\n   ensure greaterThan( angleFrom(pk-pj,pi-pj), minAngle )\\n}\\n\\nforall Element e; Node vi; Node vj; Node vk; Node vl\\nwhere e := LinearQuad( vi, vj, vk, vl ) {\\n\\n   -- grab node locations (for convenience)\\n   vec2 pi = vi.icon.center\\n   vec2 pj = vj.icon.center\\n   vec2 pk = vk.icon.center\\n   vec2 pl = vl.icon.center\\n\\n   -- draw edges as straight lines\\n   shape e.curveIJ = Line {\\n      start: pi\\n      end: pj\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveJK = Line {\\n      start: pj\\n      end: pk\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveKL = Line {\\n      start: pk\\n      end: pl\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveLI = Line {\\n      start: pl\\n      end: pi\\n      strokeColor: Colors.black\\n      strokeWidth: Global.edgeWidth\\n      ensureOnCanvas: false\\n   }\\n\\n   -- make sure quads are reasonably nice by ensuring\\n   -- the signed corner angles aren't too small (we don't\\n   -- need to worry about the final angle since the\\n   -- angles of any quad sum to 2π\\n   scalar minAngle = toRadians( 30. )\\n   ensure greaterThan( angleFrom(pj-pi,pl-pi), minAngle )\\n   ensure greaterThan( angleFrom(pk-pj,pi-pj), minAngle )\\n   ensure greaterThan( angleFrom(pl-pk,pj-pk), minAngle )\\n}\\n\\nforall Element e; Node vi; Node vj; Node vk; Node mij; Node mjk; Node mki\\nwhere e := QuadraticTriangle( vi, vj, vk, mij, mjk, mki ) {\\n\\n   -- grab node locations (for convenience)\\n   vec2 pi = vi.icon.center\\n   vec2 pj = vj.icon.center\\n   vec2 pk = vk.icon.center\\n   vec2 pij = mij.icon.center\\n   vec2 pjk = mjk.icon.center\\n   vec2 pki = mki.icon.center\\n\\n   -- offset the middle nodes in some random direction from the\\n   -- geometric midpoints between the triangle vertices\\n   scalar offsetSize = 20.\\n   scalar thetaIJ = ?\\n   scalar thetaJK = ?\\n   scalar thetaKI = ?\\n   override mij.icon.center = (pi+pj)/2. + offsetSize * unitVector(thetaIJ)\\n   override mjk.icon.center = (pj+pk)/2. + offsetSize * unitVector(thetaJK)\\n   override mki.icon.center = (pk+pi)/2. + offsetSize * unitVector(thetaKI)\\n\\n   -- offset the midpoint labels so they don't cross the edges\\n   -- (since we don't yet support disjoint constraints for Bézier\\n   -- curves, just push the vertex away from both segments to the midpoint)\\n   vec2 cij = mij.icon.center\\n   vec2 nij = unit(unit(cij-pi) + unit(cij-pj))\\n   override mij.labelText.center = cij + 12.*nij\\n\\n   vec2 cjk = mjk.icon.center\\n   vec2 njk = unit(unit(cjk-pj) + unit(cjk-pk))\\n   override mjk.labelText.center = cjk + 12.*njk\\n\\n   vec2 cki = mki.icon.center\\n   vec2 nki = unit(unit(cki-pk) + unit(cki-pi))\\n   override mki.labelText.center = cki + 12.*nki\\n\\n   -- similarly, offset the vertex labels so they don't cross the edges\\n   vec2 ni = unit(unit(pi-pij) + unit(pi-pki))\\n   override vi.labelText.center = pi + 10.*ni\\n\\n   vec2 nj = unit(unit(pj-pjk) + unit(pj-pij))\\n   override vj.labelText.center = pj + 10.*nj\\n\\n   vec2 nk = unit(unit(pk-pki) + unit(pk-pjk))\\n   override vk.labelText.center = pk + 10.*nk\\n\\n   -- draw the midpoints in a different style\\n   override mij.icon.r = Global.smallDotSize\\n   override mij.icon.fillColor = Colors.white\\n   override mij.icon.strokeColor = Colors.black\\n   override mij.icon.strokeWidth = 1.\\n\\n   override mjk.icon.r = Global.smallDotSize\\n   override mjk.icon.fillColor = Colors.white\\n   override mjk.icon.strokeColor = Colors.black\\n   override mjk.icon.strokeWidth = 1.\\n\\n   override mki.icon.r = Global.smallDotSize\\n   override mki.icon.fillColor = Colors.white\\n   override mki.icon.strokeColor = Colors.black\\n   override mki.icon.strokeWidth = 1.\\n\\n   -- draw edges as quadratic Bézier curves\\n   shape e.curveIJ = Path {\\n      d: interpolateQuadraticFromPoints(\\\"open\\\", pi, pij, pj)\\n      strokeColor: Colors.black\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveJK = Path {\\n      d: interpolateQuadraticFromPoints(\\\"open\\\", pj, pjk, pk)\\n      strokeColor: Colors.black\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n   shape e.curveKI = Path {\\n      d: interpolateQuadraticFromPoints(\\\"open\\\", pk, pki, pi)\\n      strokeColor: Colors.black\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n\\n   layer e.curveIJ above Global.box\\n   layer e.curveJK above Global.box\\n   layer e.curveKI above Global.box\\n\\n   -- make sure triangles are reasonably nice by ensuring\\n   -- the signed corner angles aren't too small (we don't\\n   -- need to worry about the final angle since the\\n   -- angles of any triangle sum to π\\n   scalar minAngle = toRadians( 50. )\\n   ensure greaterThan( angleFrom(pj-pi,pk-pi), minAngle )\\n   ensure greaterThan( angleFrom(pk-pj,pi-pj), minAngle )\\n}\\n\\n\";\n//# sourceMappingURL=lagrange-bases.style.js.map","export default \"type Node\\ntype Element\\n\\nconstructor LinearTriangle( Node vi, Node vj, Node vk ) -> Element\\nconstructor LinearQuad( Node vi, Node vj, Node vk, Node vl ) -> Element\\nconstructor QuadraticTriangle( Node vi, Node vj, Node vk, Node mij, Node mjk, Node mki ) -> Element\\n\";\n//# sourceMappingURL=lagrange-bases.domain.js.map","import substance from \"./example.substance.js\";\nimport style0, { resolver as resolver0 } from \"./lagrange-bases.style.js\";\nimport domain from \"./lagrange-bases.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"CadaverousJaguar540\"\n};\n//# sourceMappingURL=lagrange-bases.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","lagrangeBases_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,gBAAgB,EACrDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,qBACf"}