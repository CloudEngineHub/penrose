{"version":3,"file":"cubic-bezier.trio-2afdb80a.js","sources":["../../../examples/dist/curve-examples/cubic-bezier.style.js","../../../examples/dist/curve-examples/cubic-bezier.trio.js"],"sourcesContent":["import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"curve-examples\");\nexport default \"canvas {\\n    width = 600\\n    height = 400\\n}\\n\\nglobal {\\n    scalar t = 0.4\\n    color semiBlue = rgba( 27./255., 31./255., 138./255., .2 )\\n}\\n\\nforall Curve c {\\n    vec2 c.p1 = (?, ?)\\n    vec2 c.p2 = (?, ?)\\n    vec2 c.p3 = (?, ?)\\n    vec2 c.p4 = (?, ?)\\n\\n    points = [c.p1, c.p2, c.p3, c.p4]\\n    shape curve = Path {\\n        d: cubicCurveFromPoints(\\\"open\\\", points)\\n        strokeWidth: 3.5\\n        strokeColor: global.semiBlue\\n        ensureOnCanvas: true\\n    }\\n\\n    ensure equal(perimeter(points, false), 900)\\n    ensure equal(signedArea(points, false), 1e5)\\n}\\n\\nforall Point p {\\n    vec2 p.p = (?, ?) \\n\\n    shape p.point = Circle {\\n        center: p.p\\n        r: 4\\n        fillColor: rgba(0,0,0,1)\\n    }\\n\\n    shape p.text = Equation {\\n        string: p.label\\n        center: (?, ?)\\n    }\\n\\n    encourage near(p.text, p.point)\\n}\\n\\nforall Curve c; Point p1; Point p2; Point p3; Point p4\\nwhere c := CurveFromPoints(p1, p2, p3, p4) {\\n    override p1.p = c.p1\\n    override p2.p = c.p2\\n    override p3.p = c.p3\\n    override p4.p = c.p4\\n}\\n\\nforall Point p; Point p1; Point p2 \\nwhere p := Lerp(p1, p2) {\\n    vec2 p3 = global.t * p1.p + (1 - global.t) * p2.p\\n    override p.p = p3\\n\\n    shape line = Line {\\n        start: p1.p\\n        end: p2.p\\n        strokeWidth: 2\\n        strokeColor: rgba(0,0,0,1)\\n    }\\n\\n    ensure disjoint(line, p.text, -3)\\n    ensure disjoint(line, p1.text, -3)\\n    ensure disjoint(line, p2.text, -3)\\n}\\n\";\n//# sourceMappingURL=cubic-bezier.style.js.map","import substance from \"./cubic-bezier.substance.js\";\nimport style0, { resolver as resolver0 } from \"./cubic-bezier.style.js\";\nimport domain from \"./curves.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"CauliflowerDeer97138\"\n};\n//# sourceMappingURL=cubic-bezier.trio.js.map"],"names":["resolver","makeResolver","style0","cubicBezier_trio","substance","resolver0","domain"],"mappings":"+HACO,MAAMA,EAAWC,EAAa,gBAAgB,EACrDC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCAC,EAAA,CACX,UAAAC,EACA,MAAO,CACH,CAAE,SAAUF,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAC,EACA,UAAW,sBACf"}