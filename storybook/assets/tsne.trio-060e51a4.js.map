{"version":3,"file":"tsne.trio-060e51a4.js","sources":["../../../examples/dist/tsne/empty.substance.js","../../../examples/dist/tsne/tsne.style.js","../../../examples/dist/tsne/empty.domain.js","../../../examples/dist/tsne/tsne.trio.js"],"sourcesContent":["export default \"Point p00\\nPoint p01\\nPoint p02\\nPoint p03\\nPoint p04\\nPoint p05\\nPoint p06\\nPoint p07\\nPoint p08\\nPoint p09\\nPoint p10\\nPoint p11\\nPoint p12\\nPoint p13\\nPoint p14\\nPoint p15\\nPoint p16\\nPoint p17\\nPoint p18\\nPoint p19\";\n//# sourceMappingURL=empty.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"tsne\");\nexport default \"canvas {\\n    width = 600\\n    height = 600\\n}\\n\\nlayout = [first, second]\\n\\nglobal {\\n    -- Settings\\n    scalar minSize = 5\\n    scalar maxSize = 30\\n    scalar positionPerplexity = 5\\n    scalar colorPerplexity = 5\\n\\n    -- Background\\n    shape background = Rectangle {\\n        center: (0, 0)\\n        width: canvas.width\\n        height: canvas.height\\n        fillColor: rgba(0.9, 1, 0.9, 1)\\n    }\\n}\\n\\nforall Point p {\\n    p.saturation = random(0, 1)\\n    p.angle = random(0, 6.3)\\n    p.size = (abs(cos(p.angle)), abs(sin(p.angle)))\\n    p.center = (?, ?)\\n\\n    shape p.rect = Rectangle{\\n\\t    center: p.center\\n\\t    width: global.minSize + p.size[0] *(global.maxSize - global.minSize)\\n\\t    height: global.minSize + p.size[1] *(global.maxSize - global.minSize)\\n\\t    fillColor: hsva(360 * p.saturation, 100, 80, 1)\\n    }\\n\\n    p.position = (global.positionPerplexity * p.size[0], global.positionPerplexity * p.size[1], global.colorPerplexity * p.saturation)\\n    p.rect above global.background\\n}\\n\\nforall Point p1; Point p2 {\\n    ensure disjoint(p1.rect, p2.rect) in second\\n}\\n\\ncollect Point p into points {\\n    positions = listof position from points\\n    projections = listof center from points\\n    ensure tsneEnergy(positions, projections) < 0\\n}\\n\";\n//# sourceMappingURL=tsne.style.js.map","export default \"type Point\";\n//# sourceMappingURL=empty.domain.js.map","import substance from \"./empty.substance.js\";\nimport style0, { resolver as resolver0 } from \"./tsne.style.js\";\nimport domain from \"./empty.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"BilbaoNewt5645\"\n};\n//# sourceMappingURL=tsne.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","tsne_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WCCFC,EAAWC,EAAa,MAAM,EAC3CC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECFfC,EAAe,aCGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,gBACf"}