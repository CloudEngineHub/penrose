{"version":3,"file":"hypergraph.trio-b5dcfe71.js","sources":["../../../examples/dist/hypergraph/hypergraph.substance.js","../../../examples/dist/hypergraph/hypergraph.style.js","../../../examples/dist/hypergraph/hypergraph.domain.js","../../../examples/dist/hypergraph/hypergraph.trio.js"],"sourcesContent":["export default \"\\n-- Graph\\nGraph G\\nNode N1, N2, N3, N4, N5, N6, N7, N8, N9\\n\\nGraphHasNode(G, N1)\\nGraphHasNode(G, N2)\\nGraphHasNode(G, N3)\\nGraphHasNode(G, N4)\\nGraphHasNode(G, N5)\\nGraphHasNode(G, N6)\\nGraphHasNode(G, N7)\\nGraphHasNode(G, N8)\\nGraphHasNode(G, N9)\\n\\n-- First layer\\nLayer1 L1\\nGraphHasLayer1(G, L1)\\nEdge E11, E12, E13, E14, E15\\n\\nLayer1HasEdge(L1, E11)\\nLayer1HasEdge(L1, E12)\\nLayer1HasEdge(L1, E13)\\nLayer1HasEdge(L1, E14)\\nLayer1HasEdge(L1, E15)\\n\\nEdgeHasNodeInLayer1(E11, N1)\\nEdgeHasNodeInLayer1(E11, N2)\\nEdgeHasNodeInLayer1(E11, N3)\\nEdgeHasNodeInLayer1(E12, N4)\\nEdgeHasNodeInLayer1(E13, N5)\\nEdgeHasNodeInLayer1(E14, N6)\\nEdgeHasNodeInLayer1(E14, N7)\\nEdgeHasNodeInLayer1(E15, N8)\\nEdgeHasNodeInLayer1(E15, N9)\\n\\n-- Second layer\\nLayer2 L2\\nGraphHasLayer2(G, L2)\\nEdge E21, E22, E23, E24\\n\\nLayer2HasEdge(L2, E21)\\nLayer2HasEdge(L2, E22)\\nLayer2HasEdge(L2, E23)\\nLayer2HasEdge(L2, E24)\\n\\nEdgeHasNodeInLayer2(E21, N1)\\nEdgeHasNodeInLayer2(E22, N2)\\nEdgeHasNodeInLayer2(E22, N3)\\nEdgeHasNodeInLayer2(E23, N4)\\nEdgeHasNodeInLayer2(E23, N5)\\nEdgeHasNodeInLayer2(E24, N6)\\nEdgeHasNodeInLayer2(E24, N7)\\nEdgeHasNodeInLayer2(E24, N8)\\nEdgeHasNodeInLayer2(E24, N9)\\n\\n-- Third layer\\nLayer3 L3\\nGraphHasLayer3(G, L3)\\nEdge E31, E32, E33\\n\\nLayer3HasEdge(L3, E31)\\nLayer3HasEdge(L3, E32)\\nLayer3HasEdge(L3, E33)\\n\\nEdgeHasNodeInLayer3(E31, N1)\\nEdgeHasNodeInLayer3(E32, N2)\\nEdgeHasNodeInLayer3(E32, N3)\\nEdgeHasNodeInLayer3(E32, N4)\\nEdgeHasNodeInLayer3(E31, N5)\\nEdgeHasNodeInLayer3(E33, N6)\\nEdgeHasNodeInLayer3(E33, N7)\\nEdgeHasNodeInLayer3(E33, N8)\\nEdgeHasNodeInLayer3(E33, N9)\\n\";\n//# sourceMappingURL=hypergraph.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"hypergraph\");\nexport default \"\\ncanvas {\\n  width = 800\\n  height = 700\\n}\\n\\nforall Graph g {\\n  g.xl = ?\\n  g.x1 = ?\\n  g.x2 = ?\\n  g.x3 = ?\\n  g.xr = ?\\n  g.yb = ?\\n  g.yt = ?\\n  encourage g.xl == g.xr\\n  encourage g.yb == g.yt\\n  ensure 100 < g.x1 - g.xl\\n  ensure 100 < g.x2 - g.x1\\n  ensure 100 < g.x3 - g.x2\\n  ensure 100 < g.xr - g.x3\\n  encourage g.xl + g.xr == 0\\n  encourage g.yb + g.yt == 0\\n}\\n\\nforall Node n {\\n  n.r = 5\\n  n.w = 3\\n  n.xl = ?\\n  n.x1 = ?\\n  n.x2 = ?\\n  n.x3 = ?\\n  n.xr = ?\\n  n.yl = ?\\n  n.y1 = ?\\n  n.y2 = ?\\n  n.y3 = ?\\n  n.yr = ?\\n  n.dotl = Circle{ \\n    r: n.r\\n    center: [n.xl, n.yl]\\n  }\\n  n.dotlP = Circle{ \\n    r: n.r\\n    center: [n.xl, n.yl]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot1 = Circle{ \\n    r: n.r\\n    center: [n.x1, n.y1]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot1P = Circle{ \\n    r: n.r\\n    center: [n.x1, n.y1]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot2 = Circle{ \\n    r: n.r\\n    center: [n.x2, n.y2]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot2P = Circle{ \\n    r: n.r\\n    center: [n.x2, n.y2]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot3 = Circle{ \\n    r: n.r\\n    center: [n.x3, n.y3]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dot3P = Circle{ \\n    r: n.r\\n    center: [n.x3, n.y3]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dotr = Circle{ \\n    r: n.r\\n    center: [n.xr, n.yr]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.dotrP = Circle{ \\n    r: n.r\\n    center: [n.xr, n.yr]\\n    fillColor: n.dotl.fillColor\\n  }\\n  n.linel1 = Path{\\n    d: makePath((n.xl, n.yl), (n.x1, n.y1) , 20, 0)\\n    strokeWidth: n.w\\n    strokeColor: n.dotl.fillColor\\n  }\\n  n.line12 = Path{ \\n    d: makePath((n.x1, n.y1), (n.x2, n.y2) , 20, 0)\\n    strokeWidth: n.w\\n    strokeColor: n.dotl.fillColor\\n  }\\n  n.line23 = Path{ \\n    d: makePath((n.x2, n.y2), (n.x3, n.y3) , 20, 0)\\n    strokeWidth: n.w\\n    strokeColor: n.dotl.fillColor\\n  }\\n  n.line3r = Path{\\n    d: makePath((n.x3, n.y3), (n.xr, n.yr) , 20, 0)\\n    strokeWidth: n.w\\n    strokeColor: n.dotl.fillColor\\n  }\\n  encourage abs(n.y1 - n.yl) == 50\\n  encourage abs(n.y1 - n.y2) == 50\\n  encourage abs(n.y3 - n.y2) == 50\\n  encourage abs(n.y3 - n.yr) == 50\\n}\\n\\nforall Layer1 l {\\n  l.x = ?\\n  l.yb = ?\\n  l.yt = ?\\n}\\n\\nforall Layer2 l {\\n  l.x = ?\\n  l.yb = ?\\n  l.yt = ?\\n}\\n\\nforall Layer3 l {\\n  l.x = ?\\n  l.yb = ?\\n  l.yt = ?\\n}\\n\\nforall Graph g; Layer1 l\\nwhere GraphHasLayer1(g, l) {\\n  override l.x = g.x1\\n  override l.yb = g.yb\\n  override l.yt = g.yt\\n}\\n\\nforall Graph g; Layer2 l\\nwhere GraphHasLayer2(g, l) {\\n  override l.x = g.x2\\n  override l.yb = g.yb\\n  override l.yt = g.yt\\n}\\n\\nforall Graph g; Layer3 l\\nwhere GraphHasLayer3(g, l) {\\n  override l.x = g.x3\\n  override l.yb = g.yb\\n  override l.yt = g.yt\\n}\\n\\nforall Graph g; Node n\\nwhere GraphHasNode(g, n) {\\n  override n.xl = g.xl\\n  override n.x1 = g.x1\\n  override n.x2 = g.x2\\n  override n.x3 = g.x3\\n  override n.xr = g.xr\\n  ensure g.yb < n.yr\\n  ensure n.yr < g.yt\\n  ensure g.yb < n.yl\\n  ensure n.yl < g.yt\\n}\\n\\nforall Node n1; Node n2 {\\n  encourage 50.0 < abs(n2.yl - n1.yl)\\n  encourage 50.0 < abs(n2.y1 - n1.y1)\\n  encourage 50.0 < abs(n2.y2 - n1.y2)\\n  encourage 50.0 < abs(n2.y3 - n1.y3)\\n  encourage 50.0 < abs(n2.yr - n1.yr)\\n}\\n\\nforall Edge e {\\n  e.x = ?\\n  e.yt = ?\\n  e.yb = ?\\n  e.rectx = ?\\n  e.rect = Rectangle {\\n    center: [e.rectx, 0.5 * (e.yt + e.yb)]\\n    width: 20.0\\n    height: e.yt - e.yb\\n    fillColor: rgba(1.0, 1.0, 1.0, 0.0)\\n  }\\n  e.ellipse = Ellipse {\\n    center: [e.rectx, 0.5 * (e.yt + e.yb)]\\n    rx: 10.0\\n    ry: 0.5 * (e.yt - e.yb)\\n    fillColor: rgba(0.0, 0.0, 0.0, 0.2)\\n  }\\n  encourage e.yt == e.yb\\n  ensure e.rectx == e.x\\n}\\n\\nforall Layer1 l; Edge e\\nwhere Layer1HasEdge(l, e) {\\n  override e.x = l.x\\n  ensure l.yb < e.yb\\n  ensure e.yt < l.yt\\n}\\n\\nforall Layer2 l; Edge e\\nwhere Layer2HasEdge(l, e) {\\n  override e.x = l.x\\n  ensure l.yb < e.yb\\n  ensure e.yt < l.yt\\n}\\n\\nforall Layer3 l; Edge e\\nwhere Layer3HasEdge(l, e) {\\n  override e.x = l.x\\n  ensure l.yb < e.yb\\n  ensure e.yt < l.yt\\n}\\n\\nforall Edge e; Node n\\nwhere EdgeHasNodeInLayer1(e, n) {\\n  ensure contains(e.rect, n.dot1, 4)\\n}\\n\\nforall Edge e; Node n\\nwhere EdgeHasNodeInLayer2(e, n) {\\n  ensure contains(e.rect, n.dot2, 4)\\n}\\n\\nforall Edge e; Node n\\nwhere EdgeHasNodeInLayer3(e, n) {\\n  ensure contains(e.rect, n.dot3, 4)\\n}\\n\\nforall Edge e1; Edge e2 {\\n  ensure disjoint(e1.rect, e2.rect, 20)\\n  encourage abs(e1.yt - e1.yb) + abs(e2.yt - e2.yb) < abs(e1.yt + e1.yb - e2.yt - e2.yb)\\n}\\n\";\n//# sourceMappingURL=hypergraph.style.js.map","export default \"\\ntype Graph\\n\\ntype Layer\\n\\ntype Layer1\\ntype Layer2\\ntype Layer3\\n\\nLayer1 <: Layer\\nLayer2 <: Layer\\nLayer3 <: Layer\\n\\ntype Node\\ntype Edge\\n\\npredicate GraphHasLayer1(Graph g, Layer1 l)\\npredicate GraphHasLayer2(Graph g, Layer2 l)\\npredicate GraphHasLayer3(Graph g, Layer3 l)\\n\\npredicate GraphHasNode(Graph g, Node n)\\n\\npredicate Layer1HasEdge(Layer1 l, Edge e)\\npredicate Layer2HasEdge(Layer2 l, Edge e)\\npredicate Layer3HasEdge(Layer3 l, Edge e)\\n\\npredicate EdgeHasNodeInLayer1(Edge e, Node n)\\npredicate EdgeHasNodeInLayer2(Edge e, Node n)\\npredicate EdgeHasNodeInLayer3(Edge e, Node n)\\n\";\n//# sourceMappingURL=hypergraph.domain.js.map","import substance from \"./hypergraph.substance.js\";\nimport style0, { resolver as resolver0 } from \"./hypergraph.style.js\";\nimport domain from \"./hypergraph.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"ConceptualMeerkat694\"\n};\n//# sourceMappingURL=hypergraph.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","hypergraph_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,YAAY,EACjDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,sBACf"}