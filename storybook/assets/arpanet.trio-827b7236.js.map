{"version":3,"file":"arpanet.trio-827b7236.js","sources":["../../../examples/dist/graph-domain/other-examples/arpanet.substance.js","../../../examples/dist/graph-domain/simple-curved-graph-dots.style.js","../../../examples/dist/graph-domain/other-examples/arpanet.trio.js"],"sourcesContent":["export default \"\\nVertex UCLA, SRI, UCSB, Utah, BBN, MIT, RAND, SDC, HARV, LL, CWRU, CMU, NASA\\n\\nEdge(UCLA, SRI)\\nEdge(UCLA, UCSB)\\nEdge(SRI, UCSB)\\nEdge(SRI, Utah)\\nEdge(UCSB, Utah)\\nEdge(SRI, BBN)\\nEdge(BBN, MIT)\\nEdge(BBN, RAND)\\nEdge(RAND, SDC)\\nEdge(SDC, UCSB)\\nEdge(BBN, HARV)\\nEdge(HARV, MIT)\\nEdge(MIT, LL)\\nEdge(LL, NASA)\\nEdge(NASA, UCSB)\\nEdge(BBN, CWRU)\\nEdge(CWRU, CMU)\\n\\nAutoLabel All\\n\";\n//# sourceMappingURL=arpanet.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"graph-domain\");\nexport default \"canvas {\\n  width = 600\\n  height = 600\\n}\\n\\nlayout = [dots, text, adjust]\\n\\ncolor {\\n  black = #000000\\n  white = #ffffff\\n}\\n\\nnum {\\n  radius = 5\\n  labelDist = 5\\n  edgeDist = 100\\n  repelDist = 1.5 * edgeDist\\n}\\n\\nforall Vertex v {\\n  v.center = (?, ?)\\n\\n  v.text = Text {\\n    center: v.center\\n    string: v.label\\n    fillColor: color.black\\n    fontFamily: \\\"serif\\\"\\n    fontSize: \\\"18px\\\"\\n    strokeColor: color.white\\n    strokeWidth: 4\\n    paintOrder: \\\"stroke\\\"\\n  }\\n\\n  padding = 4\\n  v.dot = Circle {\\n    center: v.center\\n    r: padding + max(v.text.width, v.text.height) / 2\\n    fillColor : #0000\\n    strokeColor : color.black\\n    strokeWidth: 2\\n  }\\n  v.dot2 = Circle {\\n    center: v.center\\n    r: padding + max(v.text.width, v.text.height) / 2\\n    fillColor : #ffffffff\\n    strokeColor : #0000\\n  }\\n  v.text above v.dot2 \\n  v.dot above v.text\\n\\n  encourage shapeDistance(v.dot, v.text) == num.labelDist except dots\\n}\\n\\nforall Vertex u; Vertex v {\\n  d = vdist(u.dot.center, v.dot.center)\\n  dHat = num.repelDist\\n  -- equation 6 from https://ipc-sim.github.io/\\n  encourage minimal(max(0, -sqr(d - dHat) * log(d / dHat))) in dots\\n\\n  ensure disjoint(u.text, v.text, num.labelDist) in text\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e {\\n  a = u.dot.center\\n  b = v.dot.center\\n\\n  vec2 p1 = (?, ?)\\n  vec2 p2 = (?, ?)\\n  vec2 p3 = (?, ?)\\n  vec2 p4 = (?, ?)\\n  vec2 p5 = (?, ?)\\n  vec2 p6 = (?, ?)\\n  vec2 p7 = (?, ?)\\n  vec2 p8 = (?, ?)\\n  vec2 p9 = (?, ?)\\n\\n  radius = 6\\n  shape e.c1 = Circle {\\n      center: p1\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c2 = Circle {\\n      center: p2\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c3 = Circle {\\n      center: p3\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c4 = Circle {\\n      center: p4\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c5 = Circle {\\n      center: p5\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c6 = Circle {\\n      center: p6\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c7 = Circle {\\n      center: p7\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c8 = Circle {\\n      center: p8\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c9 = Circle {\\n      center: p9\\n      r: radius\\n      fillColor: #0000\\n  }\\n\\n  shape e.poly = Polyline {\\n    points: [a, p1, p2, p3, p4, p5, p6, p7, p8, p9, b]\\n    strokeWidth: 2\\n    strokeColor: #000\\n  }\\n\\n  encourage minimal(elasticEnergy(e.poly.points, false))\\n  encourage isEquilateral(e.poly.points, false)\\n\\n  e.start = a\\n  e.end = b\\n  e.arrow = Line {\\n    start: a\\n    end: b\\n    strokeColor: #0000\\n  }\\n\\n  e.arrow below u.dot\\n  e.arrow below v.dot\\n\\n  -- Gravity - very optional and useless\\n  -- encourage minimal(a[1])\\n  -- encourage minimal(b[1])\\n\\n  encourage vdist(u.dot.center, v.dot.center) < num.edgeDist in dots\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e; u has label {\\n  ensure disjoint(u.dot, e.c3) in adjust\\n  ensure disjoint(u.dot, e.c4) in adjust\\n  ensure disjoint(u.dot, e.c5) in adjust\\n  ensure disjoint(u.dot, e.c6) in adjust\\n  ensure disjoint(u.dot, e.c7) in adjust\\n  u.dot2 above e.poly\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e; v has label {\\n  ensure disjoint(v.dot, e.c3) in adjust\\n  ensure disjoint(v.dot, e.c4) in adjust\\n  ensure disjoint(v.dot, e.c5) in adjust\\n  ensure disjoint(v.dot, e.c6) in adjust\\n  ensure disjoint(v.dot, e.c7) in adjust\\n  v.dot2 above e.poly\\n}\\n\\nforall Vertex u; Vertex v; Vertex w where Edge(u, v) as e; w has label {\\n  ensure disjoint(w.dot, e.c3) in adjust\\n  ensure disjoint(w.dot, e.c4) in adjust\\n  ensure disjoint(w.dot, e.c5) in adjust\\n  ensure disjoint(w.dot, e.c6) in adjust\\n  ensure disjoint(w.dot, e.c7) in adjust\\n  w.dot2 above e.poly\\n}\\n\";\n//# sourceMappingURL=simple-curved-graph-dots.style.js.map","import substance from \"./arpanet.substance.js\";\nimport style0, { resolver as resolver0 } from \"../simple-curved-graph-dots.style.js\";\nimport domain from \"../simple-graph.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"CascaraKudu41689\"\n};\n//# sourceMappingURL=arpanet.trio.js.map"],"names":["substance","resolver","makeResolver","style0","arpanet_trio","resolver0","domain"],"mappings":"8HAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,cAAc,EACnDC,EAAekBACf"}