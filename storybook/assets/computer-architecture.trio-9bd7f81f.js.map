{"version":3,"file":"computer-architecture.trio-9bd7f81f.js","sources":["../../../examples/dist/box-arrow-diagram/computer-architecture.substance.js","../../../examples/dist/box-arrow-diagram/box-arrow.style.js","../../../examples/dist/box-arrow-diagram/box-arrow.domain.js","../../../examples/dist/box-arrow-diagram/computer-architecture.trio.js"],"sourcesContent":["export default \"Bus BUS\\n\\nComponent MAR\\nSignal s_BUS_MAR := mkSignal(BUS, MAR)\\n\\nComponent RAM\\nSignal s_BUS_RAM := mkSignal(BUS, RAM)\\nSignal s_RAM_BUS := mkSignal(RAM, BUS)\\nSignal s_MAR_RAM := mkSignal(MAR, RAM)\\n\\nComponent IR\\nSignal s_BUS_IR := mkSignal(BUS, IR)\\nSignal s_IR_BUS := mkSignal(IR, BUS)\\n\\nComponent CS\\nSignal s_IR_CS := mkSignal(IR, CS)\\n\\n\\nComponent PC\\nSignal s_BUS_PC := mkSignal(BUS, PC)\\nSignal s_PC_BUS := mkSignal(PC, BUS)\\n\\n\\nComponent RA\\nSignal s_BUS_RA := mkSignal(BUS, RA)\\nSignal s_RA_BUS := mkSignal(RA, BUS)\\n\\nComponent RB\\nSignal s_BUS_RB := mkSignal(BUS, RB)\\n\\n\\nComponent ALU\\nSignal s_RB_ALU := mkSignal(RB, ALU)\\nSignal s_RA_ALU := mkSignal(RA, ALU)\\nSignal s_ALU_BUS := mkSignal(ALU, BUS)\\n\\n\\nComponent RF\\nSignal s_ALU_RF := mkSignal(ALU, RF)\\n\\n\\nComponent RO\\nSignal s_BUS_RO := mkSignal(BUS, RO)\\n\\n\\nComponent D\\nSignal s_RO_D := mkSignal(RO, D)\\n\\n\\nComponent LCD\\nSignal s_BUS_LCD := mkSignal(BUS, LCD)\\n\\n\\nComponent RSP\\nSignal s_BUS_RSP := mkSignal(BUS, RSP)\\nSignal s_RSP_BUS := mkSignal(RSP, BUS)\\n\\nComponent IN\\nSignal s_IN_BUS := mkSignal(IN, BUS)\\n\\nComponent C\\n\\nLabel BUS \\\"Data Bus\\\"\\nLabel MAR \\\"Memory Address Register\\\"\\nLabel RAM \\\"Random Access Memory\\\"\\nLabel IR \\\"Instruction Register\\\"\\nLabel CS \\\"Control Signals\\\"\\nLabel PC \\\"Program Counter\\\"\\nLabel RA \\\"Register A\\\"\\nLabel RB \\\"Register B\\\"\\nLabel ALU \\\"Arithmetic Logic Unit\\\"\\nLabel RF \\\"Flags Register\\\"\\nLabel RO \\\"Output Register\\\"\\nLabel D \\\"7-Segment Display\\\"\\nLabel LCD \\\"LCD Display\\\"\\nLabel RSP \\\"Stack Pointer Register\\\"\\nLabel IN \\\"Input Module\\\"\\nLabel C \\\"Clock Module\\\"\";\n//# sourceMappingURL=computer-architecture.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"box-arrow-diagram\");\nexport default \"canvas {\\n    height = 1000\\n    width = 1000\\n}\\n\\nlayout = [dots, rects, arrow]\\n\\ndebug {\\n    -- this is the color used for the debugging dots and lines\\n    color = rgba(0, 0, 0, 0.0)\\n}\\n\\n\\nforall Component c {\\n    c.center = (? in [dots, rects], ? in [dots, rects])\\n\\n    -- c.dot is for debugging purposes and can be removed\\n    c.dot = Circle{\\n        center: c.center\\n        r: 5\\n        fillColor: debug.color\\n    }\\n\\n    c.icon = Rectangle {\\n        center: c.center\\n        fillColor: rgba(1, 1, 1, 1)\\n        strokeColor: rgba(0, 0, 0, 1)\\n        strokeWidth: 2\\n        width: c.text.width + 30\\n        height: c.text.height + 30\\n    }\\n\\n    c.text = Text {\\n        string: c.label\\n        center: c.center\\n    }\\n\\n    layer c.dot above c.icon\\n    layer c.dot above c.text\\n}\\n\\nforall Component a; Component b; Signal s\\nwhere s := mkSignal(a, b) {\\n\\n    s.start_center = a.center\\n    s.end_center = b.center\\n\\n    -- debug_line can be removed\\n    debug_line = Line {\\n        start: s.start_center\\n        end: s.end_center\\n        strokeStyle: \\\"dashed\\\"\\n        strokeColor: debug.color\\n    }\\n    layer debug_line below a.dot\\n    layer debug_line below b.dot\\n\\n    ensure norm(s.start_center - s.end_center) < 50 in dots\\n}\\n\\n-- mkSignal is not symmetric and hence the repetition here\\nforall Component a; Component b; Component c; Signal s1; Signal s2\\nwhere s1 := mkSignal(a, b); s2 := mkSignal(b, c) {\\n    encourage norm(a.center - c.center) == 10000 in [dots, rects]\\n}\\nforall Component a; Component b; Component c; Signal s1; Signal s2\\nwhere s1 := mkSignal(b, a); s2 := mkSignal(b, c) {\\n    encourage norm(a.center - c.center) == 10000 in [dots, rects]\\n}\\nforall Component a; Component b; Component c; Signal s1; Signal s2\\nwhere s1 := mkSignal(a, b); s2 := mkSignal(c, b) {\\n    encourage norm(a.center - c.center) == 10000 in [dots, rects]\\n}\\nforall Component a; Component b; Component c; Signal s1; Signal s2\\nwhere s1 := mkSignal(b, a); s2 := mkSignal(c, b) {\\n    encourage norm(a.center - c.center) == 10000 in [dots, rects]\\n}\\n\\nforall Signal s1; Signal s2 {\\n    ensure shapeDistanceLines(s1.start_center, s1.end_center, s2.start_center, s2.end_center) > 0 in [dots]\\n}\\n\\nforall Bus b {\\n    override b.icon.height = 400\\n    override b.icon.width = b.text.width + 40\\n}\\n\\n\\nforall Component a; Component b {\\n    ensure disjoint(a.icon, b.icon, 50) in rects\\n}\\n\\nforall Component a; Component b; Signal s\\nwhere s := mkSignal(a, b) {\\n    ensure shapeDistance(a.icon, b.icon) < 60 in rects\\n\\n    s.start = (? in [arrow], ? in [arrow])\\n    s.end = (? in [arrow], ? in [arrow])\\n    s.icon = Line {\\n        start: s.start\\n        end: s.end\\n        endArrowhead: \\\"straight\\\"\\n        strokeColor: #000000ff\\n    }\\n    ensure signedDistance(a.icon, s.start) == 5 in arrow\\n    ensure signedDistance(b.icon, s.end) == 5 in arrow\\n    strength = 100\\n    encourage strength * norm(s.end - s.start) == 0 in arrow\\n    \\n    s.near_center_start = encourage .5 * strength * norm(s.start - a.icon.center) == 0 in arrow\\n    s.near_center_end = encourage .5 * strength * norm(s.end - b.icon.center) == 0 in arrow\\n}\\n\\n-- for arrows with the Bus, it does not point towards the center of the bus\\nforall Component a; Bus b; Signal s\\nwhere s := mkSignal(a, b) {\\n    delete s.near_center_end\\n}\\nforall Bus a; Component b; Signal s\\nwhere s := mkSignal(a, b) {\\n    delete s.near_center_start\\n}\\n\\n\\n-- split the apparent double-headed arrows into two arrows.\\nforall Component a; Component b; Signal s1; Signal s2\\nwhere s1 := mkSignal(a, b); s2 := mkSignal(b, a) {\\n\\n    start = (s1.start + s2.end) / 2\\n    end = (s1.end + s2.start) / 2\\n\\n    t = unit(end - start)\\n    n = rot90(t)\\n    h = 4\\n\\n    override s1.icon = Line {\\n        start: start + h * n\\n        end: end + h * n\\n        endArrowhead: \\\"straight\\\"\\n        strokeColor: #000000ff\\n    }\\n\\n    override s2.icon = Line {\\n        start: end - h * n\\n        end: start - h * n\\n        endArrowhead: \\\"straight\\\"\\n        strokeColor: #000000ff\\n    }\\n}\";\n//# sourceMappingURL=box-arrow.style.js.map","export default \"type Component\\ntype Bus <: Component\\ntype Signal\\n\\nconstructor mkSignal(Component from, Component to) -> Signal\";\n//# sourceMappingURL=box-arrow.domain.js.map","import substance from \"./computer-architecture.substance.js\";\nimport style0, { resolver as resolver0 } from \"./box-arrow.style.js\";\nimport domain from \"./box-arrow.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"ButtermelonPenguin8290\",\n    excludeWarnings: []\n};\n//# sourceMappingURL=computer-architecture.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","computerArchitecture_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBCCFC,EAAWC,EAAa,mBAAmB,EACxDC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCFfC,EAAe;AAAA;AAAA;AAAA;AAAA,8DCGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,yBACX,gBAAiB,CAAE,CACvB"}