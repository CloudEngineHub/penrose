{"version":3,"file":"closest-point.domain-b016a0c4.js","sources":["../../../examples/dist/geometric-queries/closest-point/closest-point.style.js","../../../examples/dist/geometric-queries/closest-point/closest-point.domain.js"],"sourcesContent":["import { makeResolver } from \"../../resolver.js\";\nexport const resolver = makeResolver(\"geometric-queries/closest-point\");\nexport default \"canvas {\\n   width = 800\\n   height = 700\\n}\\n\\n-- Rules for drawing each type of shape\\n\\nforall Point x {\\n   vec2 x.pos = (?,?)\\n   shape x.icon = Circle {\\n      center: x.pos\\n      r: 5\\n      strokeWidth: 1\\n      fillColor: #000000ff\\n   } \\n}\\n\\nforall Line L {\\n   shape L.icon = Line {\\n      start: (?,?)\\n      end: (?,?)\\n      strokeWidth: 5\\n   }\\n}\\n\\nforall Rectangle R {\\n   shape R.icon = Rectangle {\\n      center: (?, ?)\\n      width: ?\\n      height: ?\\n      strokeWidth: 1\\n   }\\n\\n   ensure R.icon.width > 50\\n   ensure R.icon.height > 50\\n}\\n\\nforall Polyline P {\\n   vec2 p0 = (?,?)\\n   vec2 p1 = (?,?)\\n   vec2 p2 = (?,?)\\n   vec2 p3 = (?,?)\\n   vec2 p4 = (?,?)\\n   \\n   shape P.icon = Polyline {\\n      points: [ p0, p1, p2, p3, p4 ]\\n      strokeWidth: 5.0\\n      strokeLinejoin: \\\"round\\\"\\n      strokeColor: sampleColor(1.0,\\\"rgb\\\")\\n   }\\n\\n   scalar L0 = norm(p1-p0)\\n   scalar L1 = norm(p2-p1)\\n   scalar L2 = norm(p3-p2)\\n   scalar L3 = norm(p4-p3)\\n   ensure L0 > 30\\n   ensure L1 > 30\\n   ensure L2 > 30\\n   ensure L3 > 30\\n   ensure L0 < 80\\n   ensure L1 < 80\\n   ensure L2 < 80\\n   ensure L3 < 80\\n\\n   scalar theta0 = angleBetween(p1-p0,p2-p1)\\n   scalar theta1 = angleBetween(p2-p1,p3-p2)\\n   scalar theta2 = angleBetween(p3-p2,p4-p3)\\n   ensure theta0 > MathPI()/6\\n   ensure theta1 > MathPI()/6\\n   ensure theta2 > MathPI()/6\\n}\\n\\nforall Polygon P {\\n   vec2 p0 = (?,?)\\n   vec2 p1 = (?,?)\\n   vec2 p2 = (?,?)\\n   \\n   shape P.icon = Polygon {\\n      points: [ p0, p1, p2 ]\\n   }\\n\\n   vec2 e01 = p1-p0\\n   vec2 e12 = p2-p1\\n   vec2 e20 = p0-p2\\n\\n   ensure angleBetween( e01, -e12 ) > toRadians(30)\\n   ensure angleBetween( e12, -e20 ) > toRadians(30)\\n   ensure angleBetween( e20, -e01 ) > toRadians(30)\\n\\n   ensure abs(cross2D( e01, -e12 )) > 50\\n}\\n\\nforall Circle C {\\n   shape C.icon = Circle {\\n      center: (?,?)\\n      r: ?\\n   }\\n\\n   ensure C.icon.r > 50\\n}\\n\\nforall Ellipse E {\\n   shape E.icon = Ellipse {\\n      rx: ?\\n      ry: ?\\n   }\\n\\n   ensure E.icon.rx > 50\\n   ensure E.icon.ry > 50\\n}\\n\\nforall Group G {\\n\\n   vec2 p0 = (?,?)\\n   vec2 p1 = (?,?)\\n   vec2 p2 = (?,?)\\n\\n   shape s1 = Circle {\\n      r: random(30,70)\\n   }\\n   shape s2 = Rectangle {\\n      width: random(50,150)\\n      height: random(50,150)\\n   }\\n   shape s3 = Polygon {\\n      points: [p0,p1,p2]\\n   }\\n\\n   vec2 u = p1-p0\\n   vec2 v = p2-p1\\n   vec2 w = p0-p2\\n   ensure angleBetween(-u,v) > MathPI()/6\\n   ensure angleBetween(-v,w) > MathPI()/6\\n   ensure angleBetween(-w,u) > MathPI()/6\\n\\n   shape G.icon = Group {\\n      shapes: [s1,s2,s3]\\n   }\\n\\n   shape bbox = Rectangle {\\n      fillColor: none()\\n      strokeColor: #ddd\\n      strokeDasharray: \\\"10 8\\\"\\n      strokeWidth: 2.0\\n      center: (0,0)\\n      width: random(300,500)\\n      height: random(300,500)\\n   }\\n   ensure contains( bbox, s1 )\\n   ensure contains( bbox, s2 )\\n   ensure contains( bbox, s3 )\\n   ensure contains( G.icon, bbox )\\n\\n}\\n\\n-- Rules for drawing closest points\\n\\nforall Point x; Shape S\\n{\\n   vec2 p = closestPoint( S.icon, x.pos )\\n\\n   shape closestSegment = Line {\\n      start: x.pos\\n      end: p\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape closestDot = Circle {\\n      r: x.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n}\\n\\nforall Point x; Polyline L\\n{\\n   vec2 p = closestPoint( L.icon, x.pos )\\n\\n   shape closestSegment = Line {\\n      start: x.pos\\n      end: p\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape closestDot = Circle {\\n      r: x.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n}\\n\\n-- Keep shapes from overlapping\\nforall Shape S1; Shape S2\\n{\\n   ensure disjoint( S1.icon, S2.icon )\\n}\\n\\n\";\n//# sourceMappingURL=closest-point.style.js.map","export default \"type Point\\n\\ntype Shape\\ntype Line <: Shape\\ntype Polyline\\ntype Polygon <: Shape\\ntype Rectangle <: Shape\\ntype Circle <: Shape\\ntype Ellipse <: Shape\\n\\ntype Group <: Shape\\n\";\n//# sourceMappingURL=closest-point.domain.js.map"],"names":["resolver","makeResolver","style0","domain"],"mappings":"2CACY,MAACA,EAAWC,EAAa,iCAAiC,EACtEC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECFfC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}