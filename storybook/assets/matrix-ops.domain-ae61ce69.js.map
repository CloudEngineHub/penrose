{"version":3,"file":"matrix-ops.domain-ae61ce69.js","sources":["../../../examples/dist/matrix-ops/matrix-ops.style.js","../../../examples/dist/matrix-ops/matrix-ops.domain.js"],"sourcesContent":["import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"matrix-ops\");\nexport default \"canvas {\\n    width = 240\\n    height = 200\\n}\\n\\nglobal {\\n   scalar scale = 18.0\\n   string labelSize = \\\"10px\\\"\\n\\n   shape box = Rectangle {\\n      center: (0,0)\\n      width: scale*10\\n      height: scale*10\\n      fillColor: #1b1f8a11\\n      strokeWidth: 2.0\\n   }\\n\\n   shape xAxis = Line {\\n      start: (-scale*5.,0)\\n      end: (scale*5.,0)\\n      strokeColor: #888888ff\\n      strokeWidth: 0.65\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.5\\n   }\\n\\n   shape yAxis = Line {\\n      start: (0,-scale*5.)\\n      end: (0,scale*5.)\\n      strokeColor: #888888ff\\n      strokeWidth: 0.65\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.5\\n   }\\n\\n   scalar gridStrokeWidth = 0.35\\n   color gridStrokeColor = #88888844\\n\\n   shape gridX1 = Line {\\n      start: scale*(1.,-5.)\\n      end: scale*(1.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridX2 = Line {\\n      start: scale*(2.,-5.)\\n      end: scale*(2.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridX3 = Line {\\n      start: scale*(3.,-5.)\\n      end: scale*(3.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridX4 = Line {\\n      start: scale*(4.,-5.)\\n      end: scale*(4.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridXn4 = Line {\\n      start: scale*(-4.,-5.)\\n      end: scale*(-4.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridXn3 = Line {\\n      start: scale*(-3.,-5.)\\n      end: scale*(-3.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridXn2 = Line {\\n      start: scale*(-2.,-5.)\\n      end: scale*(-2.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridXn1 = Line {\\n      start: scale*(-1.,-5.)\\n      end: scale*(-1.,5.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n\\n   shape gridY1 = Line {\\n      start: scale*(-5.,1.)\\n      end: scale*(5.,1.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridY2 = Line {\\n      start: scale*(-5.,2.)\\n      end: scale*(5.,2.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridY3 = Line {\\n      start: scale*(-5.,3.)\\n      end: scale*(5.,3.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridY4 = Line {\\n      start: scale*(-5.,4.)\\n      end: scale*(5.,4.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridYn4 = Line {\\n      start: scale*(-5.,-4.)\\n      end: scale*(5.,-4.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridYn3 = Line {\\n      start: scale*(-5.,-3.)\\n      end: scale*(5.,-3.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridYn2 = Line {\\n      start: scale*(-5.,-2.)\\n      end: scale*(5.,-2.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n   shape gridYn1 = Line {\\n      start: scale*(-5.,-1.)\\n      end: scale*(5.,-1.)\\n      strokeColor: gridStrokeColor\\n      strokeWidth: gridStrokeWidth\\n   }\\n}\\n\\nforall Matrix M {\\n\\n   vec2 M.r1 = (1,0)\\n   vec2 M.r2 = (0,1)\\n\\n   mat2x2 M.mat = ( M.r1, M.r2 )\\n\\n   shape M.row1 = Line {\\n      start: (0,0)\\n      end: global.scale * M.r1\\n      strokeColor: #aaaaaaff\\n      strokeWidth: 1.0\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.5\\n   }\\n\\n   shape M.row2 = Line {\\n      start: (0,0)\\n      end: global.scale * M.r2\\n      strokeColor: #aaaaaaff\\n      strokeWidth: 1.0\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.5\\n   }\\n\\n   shape M.r1Label = Equation {\\n      center: global.scale*M.r1 + unit(M.r1)*7\\n      string: M.label + \\\"_1\\\"\\n      fillColor: M.row1.strokeColor\\n      fontSize: global.labelSize\\n   }\\n\\n   shape M.r2Label = Equation {\\n      center: global.scale*M.r2 + unit(M.r2)*7\\n      string: M.label + \\\"_2\\\"\\n      fillColor: M.row2.strokeColor\\n      fontSize: global.labelSize\\n   }\\n}\\n\\nforall Vector v {\\n\\n   scalar θ = ?\\n   vec2 v.vec = (cos(θ),sin(θ))\\n\\n   shape v.icon = Line {\\n      start: (0,0)\\n      end: global.scale * v.vec\\n      strokeColor: #aaaaaaff\\n      strokeWidth: 1.0\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.75\\n   }\\n\\n   shape v.labelText = Equation {\\n      center: global.scale*v.vec + unit(v.vec)*7\\n      string: v.label\\n      fillColor: v.icon.strokeColor\\n      fontSize: global.labelSize\\n   }\\n}\\n\\nforall Matrix A; Matrix B\\nwhere B := transpose(A)\\n{\\n   B.mat = A.mat'\\n   B.r1 = (B.mat[0][0],B.mat[0][1])\\n   B.r2 = (B.mat[1][0],B.mat[1][1])\\n}\\n\\nforall Matrix A; Vector u; Vector v\\nwhere v := mvmul( A, u )\\n{\\n   v.vec = A.mat * u.vec\\n   v.icon.strokeColor = #0000aaff\\n}\\n\\nforall Matrix A; Vector u; Vector v\\nwhere v := vmmul( u, A )\\n{\\n   v.vec = u.vec * A.mat\\n   v.icon.strokeColor = #ff6600ff\\n}\\n\\nforall Scalar c\\n{\\n   c.val = ?\\n\\n   shape c.icon = Circle {\\n      center: (0,0)\\n      r: global.scale * c.val\\n      fillColor : #ff660033\\n   }\\n\\n   shape c.labelText = Equation {\\n      center: (global.scale*c.val + 5)*sqrt(2.)*(1,1)/2.\\n      string: c.label\\n      fillColor : c.icon.fillColor\\n      fontSize: global.labelSize\\n   }\\n}\\n\\nforall Scalar c; Matrix A; Matrix B\\nwhere B := smmul( c, A )\\n{\\n   override B.mat = c.val * A.mat\\n   override B.r1 = c.val * A.r1\\n   override B.r2 = c.val * A.r2\\n}\\n\\nforall Scalar c; Matrix A; Matrix B\\nwhere B := smmulr( A, c )\\n{\\n   override B.mat = A.mat * c.val\\n   override B.r1 = A.r1 * c.val \\n   override B.r2 = A.r2 * c.val \\n}\\n\\nforall Scalar c; Matrix A; Matrix B\\nwhere B := msdiv( A, c )\\n{\\n   override B.mat = A.mat / c.val\\n   override B.r1 = A.r1 / c.val\\n   override B.r2 = A.r2 / c.val\\n}\\n\\nforall Matrix A; Vector u; Vector v\\nwhere A := outer( u, v )\\n{\\n   override A.mat = outerProduct( u.vec, v.vec )\\n   override A.r1 = ( A.mat[0][0], A.mat[0][1] )\\n   override A.r2 = ( A.mat[1][0], A.mat[1][1] )\\n}\\n\\nforall Vector u; Vector v; Vector w\\nwhere w := vadd(u,v)\\n{\\n   override w.vec = u.vec + v.vec\\n   layer u.icon above w.icon\\n   layer v.icon above w.icon\\n}\\n\\nforall Vector u; Vector v; Vector w\\nwhere w := vsub(u,v)\\n{\\n   override w.vec = u.vec - v.vec\\n   layer u.icon above w.icon\\n   layer v.icon above w.icon\\n}\\n\\nforall Vector u; Vector v; Vector w\\nwhere w := ewvvmul(u,v)\\n{\\n   override w.vec = u.vec .* v.vec\\n   layer u.icon above w.icon\\n   layer v.icon above w.icon\\n}\\n\\nforall Vector u; Vector v; Vector w\\nwhere w := ewvvdiv(u,v)\\n{\\n   override w.vec = u.vec ./ v.vec\\n   layer u.icon above w.icon\\n   layer v.icon above w.icon\\n}\\n\\nforall Scalar c; Vector u; Vector v\\nwhere v := lvmul(c,u)\\n{\\n   override v.vec = c.val * u.vec\\n   layer u.icon above v.icon\\n}\\n\\nforall Scalar c; Vector u; Vector v\\nwhere v := rvmul(u,c)\\n{\\n   override v.vec = u.vec * c.val\\n   layer u.icon above v.icon\\n}\\n\\nforall Scalar c; Vector u; Vector v\\nwhere v := vdiv(u,c)\\n{\\n   override v.vec = u.vec / c.val\\n   layer u.icon above v.icon\\n}\\n\\nforall Matrix A; Matrix B; Matrix C\\nwhere C := mmadd(A,B)\\n{\\n   override C.mat = A.mat + B.mat\\n   override C.r1 = ( C.mat[0][0], C.mat[0][1] )\\n   override C.r2 = ( C.mat[1][0], C.mat[1][1] )\\n\\n   override C.label = \\\"(\\\" + A.label + \\\"+\\\" + B.label + \\\")\\\"\\n}\\n\\nforall Matrix A; Matrix B; Matrix C\\nwhere C := mmsub(A,B)\\n{\\n   override C.mat = A.mat - B.mat\\n   override C.r1 = ( C.mat[0][0], C.mat[0][1] )\\n   override C.r2 = ( C.mat[1][0], C.mat[1][1] )\\n\\n   override C.label = \\\"(\\\" + A.label + \\\"-\\\" + B.label + \\\")\\\"\\n}\\n\\nforall Matrix A; Matrix B; Matrix C\\nwhere C := mmmul(A,B)\\n{\\n   override C.mat = A.mat * B.mat\\n   override C.r1 = ( C.mat[0][0], C.mat[0][1] )\\n   override C.r2 = ( C.mat[1][0], C.mat[1][1] )\\n\\n   override C.label = \\\"(\\\" + A.label + B.label + \\\")\\\"\\n}\\n\\nforall Matrix A; Matrix B; Matrix C\\nwhere C := ewmmmul(A,B)\\n{\\n   override C.mat = A.mat .* B.mat\\n   override C.r1 = ( C.mat[0][0], C.mat[0][1] )\\n   override C.r2 = ( C.mat[1][0], C.mat[1][1] )\\n\\n   override C.label = \\\"(\\\" + A.label + \\\"\\\\odot \\\" + B.label + \\\")\\\"\\n}\\n\\nforall Matrix A; Matrix B; Matrix C\\nwhere C := ewmmdiv(A,B)\\n{\\n   override C.mat = A.mat ./ B.mat\\n   override C.r1 = ( C.mat[0][0], C.mat[0][1] )\\n   override C.r2 = ( C.mat[1][0], C.mat[1][1] )\\n\\n   override C.label = \\\"(\\\" + A.label + \\\"\\\\oslash \\\" + B.label + \\\")\\\"\\n}\\n\\n---- set constants (for debugging)\\n\\nforall Scalar `c` {\\n   override `c`.val = 2\\n}\\n\\nforall Vector `u` {\\n   override `u`.vec = (-3,2)\\n   override `u`.icon.strokeColor = #00aa00ff\\n}\\n\\nforall Vector `v` {\\n   override `v`.vec = (2,1)\\n   override `v`.icon.strokeColor = #0000aaff\\n}\\n\\nforall Matrix `A` {\\n   override `A`.mat = ( (-1,1), (0,-1) )\\n   override `A`.r1 = ( `A`.mat[0][0], `A`.mat[0][1] )\\n   override `A`.r2 = ( `A`.mat[1][0], `A`.mat[1][1] )\\n   override `A`.row1.strokeColor = #ff0000ff\\n   override `A`.row2.strokeColor = #ff0000ff\\n}\\n\\nforall Matrix `B` {\\n   override `B`.mat = ( (4,2), (1,4) )\\n   override `B`.r1 = ( `B`.mat[0][0], `B`.mat[0][1] )\\n   override `B`.r2 = ( `B`.mat[1][0], `B`.mat[1][1] )\\n   override `B`.row1.strokeColor = #00aa00ff\\n   override `B`.row2.strokeColor = #00aa00ff\\n}\\n\\nforall Matrix `AT` {\\n   override `AT`.r1 = ( `AT`.mat[0][0], `AT`.mat[0][1] )\\n   override `AT`.r2 = ( `AT`.mat[1][0], `AT`.mat[1][1] )\\n   override `AT`.row1.strokeColor = #ff000077\\n   override `AT`.row2.strokeColor = #ff000077\\n}\\n\\nforall Matrix `X` {\\n   override `X`.mat = ( (-1,2), (0,-2) )\\n   override `X`.r1 = ( `X`.mat[0][0], `X`.mat[0][1] )\\n   override `X`.r2 = ( `X`.mat[1][0], `X`.mat[1][1] )\\n   override `X`.row1.strokeColor = #33dd00ff\\n   override `X`.row2.strokeColor = #33dd00ff\\n}\\n\\nforall Matrix `Y` {\\n   override `Y`.mat = ( (2,1), (1,2) )\\n   override `Y`.r1 = ( `Y`.mat[0][0], `Y`.mat[0][1] )\\n   override `Y`.r2 = ( `Y`.mat[1][0], `Y`.mat[1][1] )\\n   override `Y`.row1.strokeColor = #4400ccff\\n   override `Y`.row2.strokeColor = #4400ccff\\n}\\n\\n\";\n//# sourceMappingURL=matrix-ops.style.js.map","export default \"type Scalar\\ntype Vector\\ntype Matrix\\n\\nfunction transpose( Matrix A ) -> Matrix\\nfunction smmul( Scalar c, Matrix A ) -> Matrix\\nfunction smmulr( Matrix A, Scalar c ) -> Matrix\\nfunction msdiv( Matrix A, Scalar c ) -> Matrix\\nfunction mvmul( Matrix A, Vector v ) -> Vector\\nfunction vmmul( Vector v, Matrix A ) -> Vector\\nfunction outer( Vector u, Vector v ) -> Matrix\\nfunction vadd( Vector u, Vector v ) -> Vector\\nfunction vsub( Vector u, Vector v ) -> Vector\\nfunction lvmul( Scalar c, Vector u ) -> Vector\\nfunction rvmul( Vector u, Scalar c ) -> Vector\\nfunction vdiv( Vector u, Scalar c ) -> Vector\\nfunction mmmul( Matrix A, Matrix B ) -> Matrix\\nfunction mmadd( Matrix A, Matrix B ) -> Matrix\\nfunction mmsub( Matrix A, Matrix B ) -> Matrix\\nfunction ewvvmul( Vector u, Vector v ) -> Vector\\nfunction ewvvdiv( Vector u, Vector v ) -> Vector\\nfunction ewmmmul( Matrix A, Matrix B ) -> Matrix\\nfunction ewmmdiv( Matrix A, Matrix B ) -> Matrix\\n\\n\";\n//# sourceMappingURL=matrix-ops.domain.js.map"],"names":["resolver","makeResolver","style0","domain"],"mappings":"2CACY,MAACA,EAAWC,EAAa,YAAY,EACjDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}