{"version":3,"file":"caffeine.trio-2797fddd.js","sources":["../../../examples/dist/structural-formula/molecules/caffeine.substance.js","../../../examples/dist/structural-formula/pseudo-3d.style.js","../../../examples/dist/structural-formula/molecules/caffeine.trio.js"],"sourcesContent":["export default \"-- caffeine molecule, expressed via structural-formula DSL\\nCarbon C1, C2, C3, C4, C5, C6, C7, C8\\nNitrogen N1, N2, N3, N4\\nOxygen O1, O2\\nHydrogen H1, H2, H3, H4, H5, H6, H7, H8, H9, H10\\n\\nSingleBond(N2, C4)\\nSingleBond(C4, C5)\\nDoubleBond(C5, C6)\\nSingleBond(C6, N1)\\nSingleBond(N1, C2)\\nSingleBond(N2, C2)\\nDoubleBond(C2, O2)\\nSingleBond(N2, C1)\\nSingleBond(C1, H7)\\nSingleBond(C1, H6)\\nSingleBond(C1, H5)\\nDoubleBond(C4, O1)\\nSingleBond(C7, H4)\\nSingleBond(C7, H3)\\nSingleBond(H2, C7)\\nSingleBond(N3, C7)\\nSingleBond(N3, C5)\\nSingleBond(C8, N3)\\nDoubleBond(C8, N4)\\nSingleBond(N4, C6)\\nSingleBond(C8, H1)\\nSingleBond(C3, H10)\\nSingleBond(C3, H8)\\nSingleBond(C3, H9)\\nSingleBond(N1, C3)\\n\\nAutoLabel All\\n\\nTitle title\\nLabel title \\\"caffeine\\\"\\n\";\n//# sourceMappingURL=caffeine.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"structural-formula\");\nexport default \"canvas {\\n   scalar width  = 800\\n   scalar height = 800\\n}\\n\\nglobal {\\n   shape background = Image {\\n      href: \\\"background.svg\\\"\\n      center: (0,0)\\n      width: canvas.width\\n      height: canvas.height\\n      preserveAspectRatio: \\\"none\\\"\\n      ensureOnCanvas: false\\n   }\\n}\\n\\nColors {\\n   scalar a = .4\\n   vec4 clear           = rgba( 0., 0., 0., 0. )\\n   vec4 black           = rgba( 0., 0., 0., 1. )\\n   vec4 clearblack      = rgba( a, a, a, 1. )\\n   vec4 gray            = rgba( .5, .5, .5, 1. )\\n   vec4 cleargray       = rgba( .8, .8, .8, 1. )\\n   vec4 lightGray       = rgba( .9, .9, .9, 1. )\\n   vec4 white           = rgba( 1., 1., 1., 1. )\\n   vec4 red             = rgba( 1., 0., 0., 1. )\\n   vec4 clearred        = rgba( 1., a, a, 1. )\\n   vec4 green           = rgba( 0., .7, 0., 1. )\\n   vec4 cleargreen      = rgba( a, .7, a, 1. )\\n   vec4 blue            = rgba( 0., 0., 1., 1. )\\n   vec4 clearblue       = rgba( a, a, 1., 1. )\\n   vec4 darkRed         = rgba( .7, 0., 0., 1. )\\n   vec4 darkBlue        = rgba( 0., 0., .7, 1. )\\n   vec4 purple          = rgba( .66, .36, .95, 1. )\\n   vec4 clearpurple     = rgba( .86, .56, 1., 1. )\\n   vec4 turquoise       = rgba( .1, .7, .6, 1. )\\n}\\n\\nGlobal {\\n   scalar atomRadius = 25.\\n   scalar bondLength = 60.\\n\\n   scalar padding = 100.\\n}\\n\\nforall Node n {\\n\\n   scalar cx = ?\\n   scalar cy = ?\\n   vec2 n.center = (cx,cy)\\n\\n   scalar R = Global.atomRadius\\n\\n   shape n.icon = Circle {\\n      r : R\\n      center : n.center\\n      fillColor : Colors.white\\n      strokeColor : Colors.black\\n      strokeWidth : 3.\\n   }\\n\\n   shape n.shading = Image {\\n      href: \\\"node-shading.svg\\\"\\n      center: n.icon.center\\n      width: 2*n.icon.r - n.icon.strokeWidth/2\\n      height: 2*n.icon.r - n.icon.strokeWidth/2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape n.shadow = Ellipse {\\n      rx : 2.*Global.atomRadius\\n      ry : Global.atomRadius\\n      center : (cx,cy) + (0.,-2.*R)\\n      fillColor : rgba( 0, 0, 0, 1 )\\n      strokeColor : Colors.clear\\n      strokeWidth : 3.\\n   }\\n\\n   layer n.shading above n.icon\\n   layer n.icon above n.shadow\\n   layer n.shadow above global.background\\n}\\n\\ncollect Node n into nodes {\\n\\n   shadows = listof shadow from nodes\\n   \\n   shape nodeShadows = Group {\\n      shapes: shadows\\n      opacity: .1\\n      style: \\\"filter:blur(5px);\\\"\\n   }\\n}\\n\\nforall Node n\\nwhere n has label {\\n   shape n.labelText = Equation {\\n      string : n.label\\n      center : n.center\\n      fillColor : Colors.black\\n      fontSize : \\\"18px\\\"\\n      ensureOnCanvas: false\\n   }\\n\\n   layer n.icon below n.labelText\\n}\\n\\nforall FunctionalGroup g {\\n   override g.icon.fillColor = Colors.clear\\n   override g.icon.strokeColor = Colors.clear\\n   override g.labelText.fillColor = Colors.black\\n   override g.shadow.fillColor = Colors.clear\\n\\n   g.box = Rectangle {\\n      center : g.center\\n      width : 3.*Global.atomRadius\\n      height : 1.5*Global.atomRadius\\n      fillColor : Colors.lightGray\\n      strokeColor : Colors.gray\\n      strokeWidth : 3.\\n      cornerRadius : 10.\\n   }\\n\\n   layer g.shadow below g.box\\n}\\n\\n\\nforall FunctionalGroup g\\nwhere g has label {\\n   layer g.labelText above g.box\\n}\\n\\nforall Oxygen a {\\n   override a.icon.fillColor = Colors.clearred\\n   override a.icon.strokeColor = Colors.red\\n   override a.labelText.fillColor = none()\\n}\\n\\nforall Carbon a {\\n   override a.icon.fillColor = Colors.clearblack\\n   override a.icon.strokeColor = Colors.black\\n   override a.labelText.fillColor = none()\\n}\\n\\nforall Nitrogen a {\\n   override a.icon.fillColor = Colors.clearblue\\n   override a.icon.strokeColor = Colors.blue\\n   override a.labelText.fillColor = none()\\n}\\n\\nforall Hydrogen a {\\n   override a.icon.fillColor = Colors.cleargray\\n   override a.icon.strokeColor = Colors.gray\\n   override a.labelText.fillColor = none()\\n\\n   -- make hydrogen atoms (and their shadows) smaller\\n   override a.icon.r = .75*Global.atomRadius\\n   override a.shadow.rx = .75*2.*Global.atomRadius\\n   override a.shadow.ry = .75*Global.atomRadius\\n}\\n\\nforall Chlorine a {\\n   override a.icon.fillColor = Colors.cleargreen\\n   override a.icon.strokeColor = Colors.green\\n   override a.labelText.fillColor = none()\\n}\\n\\nforall Sodium a {\\n   override a.icon.fillColor = Colors.clearpurple\\n   override a.icon.strokeColor = Colors.purple\\n   override a.labelText.fillColor = none()\\n}\\n\\n\\nforall Node n1; Node n2\\nwhere SingleBond( n1, n2 ) {\\n\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   vec2 u = unit(x1-x2)\\n   scalar r = Global.atomRadius\\n\\n   shape line = Line {\\n      start : x1 - .5*r*u\\n        end : x2 + .5*r*u\\n      strokeWidth : 10.\\n      strokeColor : Colors.gray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   shape innerLine = Line {\\n      start : x1 - .5*r*u\\n        end : x2 + .5*r*u\\n      strokeWidth : 4.\\n      strokeColor : Colors.lightGray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   encourage equal( norm(x1-x2), Global.bondLength )\\n\\n   layer line above n2.shading\\n   layer innerLine above line\\n   layer innerLine below n1.icon\\n}\\n\\nforall Node n1; Node n2\\nwhere DoubleBond( n1, n2 ) {\\n\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   vec2 u = unit(x1-x2)\\n   vec2 v = ( -u[1], u[0] )\\n   scalar r = Global.atomRadius\\n\\n   shape line1 = Line {\\n      start : x1 - .5*r*u - .25*r*v\\n        end : x2 + .5*r*u - .25*r*v\\n      strokeWidth : 10.\\n      strokeColor : Colors.gray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   shape innerLine1 = Line {\\n      start : x1 - .5*r*u - .25*r*v\\n        end : x2 + .5*r*u - .25*r*v\\n      strokeWidth : 4.\\n      strokeColor : Colors.lightGray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   shape line2 = Line {\\n      start : x1 - .5*r*u + .25*r*v\\n        end : x2 + .5*r*u + .25*r*v\\n      strokeWidth : 10.\\n      strokeColor : Colors.gray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   shape innerLine2 = Line {\\n      start : x1 - .5*r*u + .25*r*v\\n        end : x2 + .5*r*u + .25*r*v\\n      strokeWidth : 4.\\n      strokeColor : Colors.lightGray\\n      strokeLinecap: \\\"round\\\"\\n   }\\n\\n   encourage equal( norm(x1-x2), Global.bondLength )\\n\\n   layer line1 above n2.shading\\n   layer innerLine1 above line1\\n   layer innerLine1 below n1.icon\\n\\n   layer line2 above n2.shading\\n   layer innerLine2 above line2\\n   layer innerLine2 below n1.icon\\n\\n   layer line2 above innerLine1\\n}\\n\\nforall Node n1; Node n2\\nwhere IonicBond( n1, n2 ) {\\n\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   vec2 u = unit(x1-x2)\\n   scalar r = Global.atomRadius\\n\\n   shape line = Line {\\n      start : x1 - .5*r*u\\n        end : x2 + .5*r*u\\n      strokeWidth : 2.5\\n      strokeColor : Colors.turquoise\\n      strokeLinecap: \\\"butt\\\"\\n      style: \\\"dashed\\\"\\n   }\\n\\n   encourage equal( norm(x1-x2), Global.bondLength )\\n\\n   layer line below n1.icon\\n   layer line below n2.icon\\n}\\n\\n\\n-- make bonds with hydrogen shorter\\nforall Node n; Hydrogen h\\nwhere SingleBond(n,h) {\\n   vec2 x1 = n.center\\n   vec2 x2 = h.center\\n   encourage equal( 2.*norm(x1-x2), .5*Global.bondLength )\\n}\\n\\n-- give water molecules a physical bond angle\\nforall Oxygen o; Hydrogen h1; Hydrogen h2\\nwhere SingleBond(o,h1); SingleBond(o,h2) {\\n   vec2 a = o.center\\n   vec2 b = h1.center\\n   vec2 c = h2.center\\n   encourage equal( angleBetween(b-a,c-a), toRadians(104.5) )\\n}\\n\\n-- use a Coulomb-like force to prevent nodes from overlapping\\nforall Node n1; Node n2 {\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   encourage equal( 200000./normsq(x1-x2), 0. )\\n\\n   -- make sure shadows are drawn below all molecules\\n   layer n1.shadow below n2.icon\\n   layer n2.shadow below n1.icon\\n}\\n\\nforall Title t\\nwhere t has label\\n{\\n   shape t.labelText = Text {\\n      string : t.label\\n      fillColor : Colors.black\\n      fontSize : \\\"40px\\\"\\n      fontFamily: \\\"HelveticaNeue-CondensedBold, Helvetica Neue, Helvetica, Arial, sans-serif\\\"\\n      fontWeight: \\\"bold\\\"\\n      center : (?,?)\\n   }\\n   layer t.labelText above global.background\\n}\\n\\nforall Title t; Node n\\nwhere t has label {\\n   ensure disjoint( t.labelText, n.icon )\\n}\\n\\nforall Molecule m; Node n\\nwhere Contains(m,n) {\\n   encourage near( m.box, n.icon )\\n   layer m.labelText above n.icon\\n}\\n\\n\";\n//# sourceMappingURL=pseudo-3d.style.js.map","import substance from \"./caffeine.substance.js\";\nimport style0, { resolver as resolver0 } from \"../pseudo-3d.style.js\";\nimport domain from \"../structural-formula.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"GreybeardChinchilla991\",\n    excludeWarnings: []\n};\n//# sourceMappingURL=caffeine.trio.js.map"],"names":["substance","resolver","makeResolver","style0","caffeine_trio","resolver0","domain"],"mappings":"oIAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,oBAAoB,EACzDC,EAAeyBACX,gBAAiB,CAAE,CACvB"}