{"version":3,"file":"test.trio-9be6fa43.js","sources":["../../../examples/dist/random-sampling/test-random-sampling.substance.js","../../../examples/dist/random-sampling/random-sampling.style.js","../../../examples/dist/random-sampling/random-sampling.domain.js","../../../examples/dist/random-sampling/test.trio.js"],"sourcesContent":["export default \"-- domain: random-sampling.domain\\n-- style: random-sampling.style\\n-- variation: CocoaMagpie2612\\n\\nInterval I\\nPoint pI0 := sampleInterval( I )\\nPoint pI1 := sampleInterval( I )\\nPoint pI2 := sampleInterval( I )\\nPoint pI3 := sampleInterval( I )\\nPoint pI4 := sampleInterval( I )\\nPoint pI5 := sampleInterval( I )\\nPoint pI6 := sampleInterval( I )\\nPoint pI7 := sampleInterval( I )\\nPoint pI8 := sampleInterval( I )\\nPoint pI9 := sampleInterval( I )\\nPoint pI10 := sampleInterval( I )\\nPoint pI11 := sampleInterval( I )\\nPoint pI12 := sampleInterval( I )\\nPoint pI13 := sampleInterval( I )\\nPoint pI14 := sampleInterval( I )\\nPoint pI15 := sampleInterval( I )\\nPoint pI16 := sampleInterval( I )\\nPoint pI17 := sampleInterval( I )\\nPoint pI18 := sampleInterval( I )\\nPoint pI19 := sampleInterval( I )\\nPoint pI20 := sampleInterval( I )\\nPoint pI21 := sampleInterval( I )\\nPoint pI22 := sampleInterval( I )\\nPoint pI23 := sampleInterval( I )\\nPoint pI24 := sampleInterval( I )\\nPoint pI25 := sampleInterval( I )\\nPoint pI26 := sampleInterval( I )\\nPoint pI27 := sampleInterval( I )\\nPoint pI28 := sampleInterval( I )\\nPoint pI29 := sampleInterval( I )\\nPoint pI30 := sampleInterval( I )\\nPoint pI31 := sampleInterval( I )\\n\\nCircle C\\nPoint pC0 := sampleCircle( C )\\nPoint pC1 := sampleCircle( C )\\nPoint pC2 := sampleCircle( C )\\nPoint pC3 := sampleCircle( C )\\nPoint pC4 := sampleCircle( C )\\nPoint pC5 := sampleCircle( C )\\nPoint pC6 := sampleCircle( C )\\nPoint pC7 := sampleCircle( C )\\nPoint pC8 := sampleCircle( C )\\nPoint pC9 := sampleCircle( C )\\nPoint pC10 := sampleCircle( C )\\nPoint pC11 := sampleCircle( C )\\nPoint pC12 := sampleCircle( C )\\nPoint pC13 := sampleCircle( C )\\nPoint pC14 := sampleCircle( C )\\nPoint pC15 := sampleCircle( C )\\nPoint pC16 := sampleCircle( C )\\nPoint pC17 := sampleCircle( C )\\nPoint pC18 := sampleCircle( C )\\nPoint pC19 := sampleCircle( C )\\nPoint pC20 := sampleCircle( C )\\nPoint pC21 := sampleCircle( C )\\nPoint pC22 := sampleCircle( C )\\nPoint pC23 := sampleCircle( C )\\nPoint pC24 := sampleCircle( C )\\nPoint pC25 := sampleCircle( C )\\nPoint pC26 := sampleCircle( C )\\nPoint pC27 := sampleCircle( C )\\nPoint pC28 := sampleCircle( C )\\nPoint pC29 := sampleCircle( C )\\nPoint pC30 := sampleCircle( C )\\nPoint pC31 := sampleCircle( C )\\n\\nDisk D\\nPoint pD0 := sampleDisk( D )\\nPoint pD1 := sampleDisk( D )\\nPoint pD2 := sampleDisk( D )\\nPoint pD3 := sampleDisk( D )\\nPoint pD4 := sampleDisk( D )\\nPoint pD5 := sampleDisk( D )\\nPoint pD6 := sampleDisk( D )\\nPoint pD7 := sampleDisk( D )\\nPoint pD8 := sampleDisk( D )\\nPoint pD9 := sampleDisk( D )\\nPoint pD10 := sampleDisk( D )\\nPoint pD11 := sampleDisk( D )\\nPoint pD12 := sampleDisk( D )\\nPoint pD13 := sampleDisk( D )\\nPoint pD14 := sampleDisk( D )\\nPoint pD15 := sampleDisk( D )\\nPoint pD16 := sampleDisk( D )\\nPoint pD17 := sampleDisk( D )\\nPoint pD18 := sampleDisk( D )\\nPoint pD19 := sampleDisk( D )\\nPoint pD20 := sampleDisk( D )\\nPoint pD21 := sampleDisk( D )\\nPoint pD22 := sampleDisk( D )\\nPoint pD23 := sampleDisk( D )\\nPoint pD24 := sampleDisk( D )\\nPoint pD25 := sampleDisk( D )\\nPoint pD26 := sampleDisk( D )\\nPoint pD27 := sampleDisk( D )\\nPoint pD28 := sampleDisk( D )\\nPoint pD29 := sampleDisk( D )\\nPoint pD30 := sampleDisk( D )\\nPoint pD31 := sampleDisk( D )\\n\\nTriangle T\\nPoint pT0 := sampleTriangle( T )\\nPoint pT1 := sampleTriangle( T )\\nPoint pT2 := sampleTriangle( T )\\nPoint pT3 := sampleTriangle( T )\\nPoint pT4 := sampleTriangle( T )\\nPoint pT5 := sampleTriangle( T )\\nPoint pT6 := sampleTriangle( T )\\nPoint pT7 := sampleTriangle( T )\\nPoint pT8 := sampleTriangle( T )\\nPoint pT9 := sampleTriangle( T )\\nPoint pT10 := sampleTriangle( T )\\nPoint pT11 := sampleTriangle( T )\\nPoint pT12 := sampleTriangle( T )\\nPoint pT13 := sampleTriangle( T )\\nPoint pT14 := sampleTriangle( T )\\nPoint pT15 := sampleTriangle( T )\\nPoint pT16 := sampleTriangle( T )\\nPoint pT17 := sampleTriangle( T )\\nPoint pT18 := sampleTriangle( T )\\nPoint pT19 := sampleTriangle( T )\\nPoint pT20 := sampleTriangle( T )\\nPoint pT21 := sampleTriangle( T )\\nPoint pT22 := sampleTriangle( T )\\nPoint pT23 := sampleTriangle( T )\\nPoint pT24 := sampleTriangle( T )\\nPoint pT25 := sampleTriangle( T )\\nPoint pT26 := sampleTriangle( T )\\nPoint pT27 := sampleTriangle( T )\\nPoint pT28 := sampleTriangle( T )\\nPoint pT29 := sampleTriangle( T )\\nPoint pT30 := sampleTriangle( T )\\nPoint pT31 := sampleTriangle( T )\\n\\nSphere S\\nPoint pS0 := sampleSphere( S )\\nPoint pS1 := sampleSphere( S )\\nPoint pS2 := sampleSphere( S )\\nPoint pS3 := sampleSphere( S )\\nPoint pS4 := sampleSphere( S )\\nPoint pS5 := sampleSphere( S )\\nPoint pS6 := sampleSphere( S )\\nPoint pS7 := sampleSphere( S )\\nPoint pS8 := sampleSphere( S )\\nPoint pS9 := sampleSphere( S )\\nPoint pS10 := sampleSphere( S )\\nPoint pS11 := sampleSphere( S )\\nPoint pS12 := sampleSphere( S )\\nPoint pS13 := sampleSphere( S )\\nPoint pS14 := sampleSphere( S )\\nPoint pS15 := sampleSphere( S )\\nPoint pS16 := sampleSphere( S )\\nPoint pS17 := sampleSphere( S )\\nPoint pS18 := sampleSphere( S )\\nPoint pS19 := sampleSphere( S )\\nPoint pS20 := sampleSphere( S )\\nPoint pS21 := sampleSphere( S )\\nPoint pS22 := sampleSphere( S )\\nPoint pS23 := sampleSphere( S )\\nPoint pS24 := sampleSphere( S )\\nPoint pS25 := sampleSphere( S )\\nPoint pS26 := sampleSphere( S )\\nPoint pS27 := sampleSphere( S )\\nPoint pS28 := sampleSphere( S )\\nPoint pS29 := sampleSphere( S )\\nPoint pS30 := sampleSphere( S )\\nPoint pS31 := sampleSphere( S )\\n\";\n//# sourceMappingURL=test-random-sampling.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"random-sampling\");\nexport default \"----------------------------------------\\n-- Global parameters -------------------\\n----------------------------------------\\n\\ncanvas {\\n   width = 240\\n   height = 200\\n}\\n\\ncolors {\\n   color black = #000\\n   color blue = #1b1f8a33\\n   color darkBlue = #9ea6dd\\n   color shadow = rgba(0,0,0,.1)\\n}\\n\\nglobal {\\n   scalar lineWidth = 0.65\\n   scalar overlapPadding = 5.0\\n   scalar shadowScaleX = 0.8\\n   scalar shadowScaleY = 0.25\\n}\\n\\n----------------------------------------\\n-- Rules for drawing shapes ------------\\n----------------------------------------\\n\\nforall Point p {\\n   -- location\\n   vec2 p.x = (?,?)\\n\\n   -- draw as a small dot\\n   shape p.icon = Circle {\\n      center: p.x\\n      r: 0.8\\n      fillColor: colors.black\\n   }\\n}\\n\\nforall Interval I {\\n   -- location of endpoints\\n   scalar x = ?\\n   scalar y = ?\\n   scalar w = random(50,150)\\n   vec2 I.x0 = (x-w/2,y)\\n   vec2 I.x1 = (x+w/2,y)\\n\\n   -- draw as a horizontal line segment\\n   shape I.icon = Line {\\n      start: I.x0\\n      end: I.x1\\n      strokeWidth: global.lineWidth\\n      strokeColor: colors.black\\n   }\\n}\\n\\nforall Circle C {\\n   -- center and radius\\n   vec2 C.center = (?,?)\\n   scalar C.r = random(10,35)\\n\\n   -- draw as an empty circle\\n   shape C.icon = Circle {\\n      center: C.center\\n      r: C.r\\n      fillColor: none()\\n      strokeWidth: global.lineWidth\\n      strokeColor: colors.black\\n   }\\n}\\n\\nforall Disk D {\\n   -- center and radius\\n   vec2 D.center = (?,?)\\n   scalar D.r = random(10,35)\\n\\n   -- draw as a filled circle\\n   shape D.icon = Circle {\\n      center: D.center\\n      r: D.r\\n      fillColor: colors.blue\\n   }\\n}\\n\\nforall Triangle T {\\n   -- vertices\\n   vec2 T.p0 = (?,?)\\n   vec2 T.p1 = (?,?)\\n   vec2 T.p2 = (?,?)\\n\\n   -- make sure angles are reasonable\\n   scalar minAngle = MathPI()/6\\n   vec2 u = T.p1 - T.p0\\n   vec2 v = T.p2 - T.p1\\n   vec2 w = T.p0 - T.p2\\n   ensure angleBetween( -u, v ) > minAngle\\n   ensure angleBetween( -v, w ) > minAngle\\n   ensure angleBetween( -w, u ) > minAngle\\n\\n   -- draw as a filled polygon\\n   shape T.icon = Polygon {\\n      points: [T.p0, T.p1, T.p2]\\n      fillColor: colors.blue\\n   }\\n}\\n\\nforall Sphere S {\\n   -- center and radius\\n   vec2 S.center = (?,?)\\n   scalar S.r = random(10,35)\\n\\n   -- draw as a filled circle\\n   shape S.icon = Circle {\\n      center: S.center\\n      r: S.r\\n      fillColor: colors.blue\\n      strokeColor: colors.darkBlue\\n      strokeWidth: global.lineWidth\\n   }\\n\\n   -- draw an equator\\n   shape S.equator = Ellipse {\\n      center: S.center\\n      rx: S.r\\n      ry: S.r/4.\\n      fillColor: none()\\n      strokeColor: colors.darkBlue\\n      strokeWidth: global.lineWidth\\n   }\\n\\n   -- draw a shadow\\n   shape S.shadow = Ellipse {\\n      center: S.center - (0,1.1*S.r)\\n      rx: S.r * global.shadowScaleX\\n      ry: S.r * global.shadowScaleY\\n      fillColor: colors.shadow\\n   }\\n\\n   layer S.equator above S.icon\\n   layer S.shadow below S.icon\\n}\\n\\n-- draw points above shapes\\nforall Point p; Shape S {\\n   layer p.icon above S.icon\\n}\\n\\nforall Point p; Sphere S {\\n   layer p.icon above S.equator\\n}\\n\\n-- ensure that no two shapes overlap\\nforall Shape S1; Shape S2 {\\n   ensure disjoint( S1.icon, S2.icon, global.overlapPadding )\\n}\\n\\n----------------------------------------\\n-- Rules for sampling shapes -----------\\n----------------------------------------\\n\\nforall Point p; Interval I\\nwhere p := sampleInterval( I ) {\\n   scalar t = unitRandom()\\n   override p.x = (1-t)*I.x0 + t*I.x1\\n}\\n\\nforall Point p; Circle C\\nwhere p := sampleCircle( C ) {\\n   vec2 y = circleRandom()\\n   override p.x = C.r*y + C.center\\n}\\n\\nforall Point p; Disk D\\nwhere p := sampleDisk( D ) {\\n   vec2 y = diskRandom()\\n   override p.x = D.r*y + D.center\\n}\\n\\nforall Point p; Triangle T\\nwhere p := sampleTriangle( T ) {\\n   vec2 y = triangleRandom( T.p0, T.p1, T.p2 )\\n   override p.x = y\\n}\\n\\nforall Point p; Sphere S\\nwhere p := sampleSphere( S ) {\\n\\n   -- sample a 3D point and project to 2D\\n   scalar cameraZ = 2\\n   vec3 Y = sphereRandom()\\n   vec2 y = (Y[0],Y[1])/(Y[2]+cameraZ)\\n   override p.x = 1.7*S.r*y + S.center\\n\\n   -- set point scale and opacity based\\n   -- on distance from camera\\n   scalar R = .05*S.r/(Y[2]+cameraZ)\\n   scalar alpha = 1./(Y[2]+cameraZ)\\n   override p.icon.r = R\\n   override p.icon.fillColor = rgba(0,0,0,alpha)\\n\\n   -- draw a shadow for the point\\n   vec2 y0 = ( S.r*global.shadowScaleX*y[0], S.r*global.shadowScaleY*y[1] )\\n\\n   shape p.shadow = Circle {\\n      center: y0 + S.center - (0,1.1*S.r)\\n      r: R\\n      fillColor: colors.shadow\\n   }\\n}\\n\\n\";\n//# sourceMappingURL=random-sampling.style.js.map","export default \"type Point\\n\\ntype Shape\\ntype Interval <: Shape\\ntype Circle <: Shape\\ntype Disk <: Shape\\ntype Triangle <: Shape\\ntype Sphere <: Shape\\n\\nconstructor sampleInterval( Interval I ) -> Point p\\nconstructor   sampleCircle(   Circle C ) -> Point p\\nconstructor     sampleDisk(     Disk D ) -> Point p\\nconstructor sampleTriangle( Triangle T ) -> Point p\\nconstructor   sampleSphere(   Sphere S ) -> Point p\\n\\n\";\n//# sourceMappingURL=random-sampling.domain.js.map","import substance from \"./test-random-sampling.substance.js\";\nimport style0, { resolver as resolver0 } from \"./random-sampling.style.js\";\nimport domain from \"./random-sampling.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"CocoaMagpie2612\",\n    excludeWarnings: [\"BBoxApproximationWarning\"]\n};\n//# sourceMappingURL=test.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","test_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAea,iBAAiB,EACtDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,kBACX,gBAAiB,CAAC,0BAA0B,CAChD"}