{"version":3,"file":"test.trio-8641b89b.js","sources":["../../../examples/dist/geometric-queries/closest-silhouette-point/test.substance.js","../../../examples/dist/geometric-queries/closest-silhouette-point/closest-silhouette-point.style.js","../../../examples/dist/geometric-queries/closest-silhouette-point/closest-silhouette-point.domain.js","../../../examples/dist/geometric-queries/closest-silhouette-point/test.trio.js"],"sourcesContent":["export default \"-- For each shape, finds the closest silhouette point relative to the query point x.\\n\\nPoint x\\nLine L\\nPolyline M\\nPolygon P\\nRectangle R\\nCircle C\\nEllipse E\\n-- Group G\\n\\n\";\n//# sourceMappingURL=test.substance.js.map","import { makeResolver } from \"../../resolver.js\";\nexport const resolver = makeResolver(\"geometric-queries/closest-silhouette-point\");\nexport default \"canvas {\\n   width = 800\\n   height = 700\\n}\\n\\n-- Rules for drawing each type of shape\\n\\nforall Point x {\\n   vec2 x.pos = (0,canvas.height/2 - 10)\\n   shape x.icon = Circle {\\n      center: x.pos\\n      r: 5\\n      strokeWidth: 1\\n      fillColor: #000000ff\\n   } \\n}\\n\\nforall Line L {\\n   shape L.icon = Line {\\n      start: (?,?)\\n      end: (?,?)\\n      strokeWidth: 5\\n   }\\n}\\n\\nforall Rectangle R {\\n   shape R.icon = Rectangle {\\n      center: (?, ?)\\n      width: ?\\n      height: ?\\n      strokeWidth: 1\\n   }\\n\\n   ensure R.icon.width > 50\\n   ensure R.icon.height > 50\\n}\\n\\nforall Polyline M {\\n   vec2 p0 = (?,?)\\n   vec2 p1 = p0 + 50*circleRandom()\\n   vec2 p2 = p1 + 50*rotateBy(unit(p1-p0),random(0,1.5))\\n   vec2 p3 = p2 + 50*rotateBy(unit(p2-p1),random(0,1.5))\\n   vec2 p4 = p3 + 50*rotateBy(unit(p3-p2),random(-1.5,0))\\n   \\n   shape M.icon = Polyline {\\n      points: [ p0, p1, p2, p3, p4 ]\\n      strokeWidth: 5.0\\n      strokeLinejoin: \\\"round\\\"\\n      strokeColor: sampleColor(1.0, \\\"rgb\\\")\\n   }\\n}\\n\\nforall Polygon P {\\n   vec2 c = (?,?)\\n   scalar d = random(100,200)\\n   scalar u = circleRandom()\\n   scalar v = rot90(u)\\n   vec2 p0 = c + d*u\\n   vec2 p2 = c - d*u\\n   vec2 p1 = c + random(-150,150)*u + random(60,150)*v\\n   vec2 p3 = c + random(-150,150)*u - random(60,150)*v\\n\\n   shape P.icon = Polygon {\\n      points: [ p0, p1, p2, p3 ]\\n   }\\n}\\n\\nforall Circle C {\\n   shape C.icon = Circle {\\n      center: (?,?)\\n      r: random(30,80)\\n   }\\n}\\n\\nforall Ellipse E {\\n   shape E.icon = Ellipse {\\n      center: (0,0)\\n      rx: random(30,80)\\n      ry: random(30,80)\\n   }\\n}\\n\\nforall Group G {\\n\\n   vec2 p0 = (?,?)\\n   vec2 p1 = (?,?)\\n   vec2 p2 = (?,?)\\n\\n   shape s1 = Circle {\\n      r: random(30,70)\\n   }\\n   shape s2 = Rectangle {\\n      width: random(50,150)\\n      height: random(50,150)\\n   }\\n   shape s3 = Polygon {\\n      points: [p0,p1,p2]\\n   }\\n\\n   vec2 u = p1-p0\\n   vec2 v = p2-p1\\n   vec2 w = p0-p2\\n   ensure angleBetween(-u,v) > MathPI()/6\\n   ensure angleBetween(-v,w) > MathPI()/6\\n   ensure angleBetween(-w,u) > MathPI()/6\\n\\n   shape G.icon = Group {\\n      shapes: [s1,s2,s3]\\n   }\\n\\n   shape bbox = Rectangle {\\n      fillColor: none()\\n      strokeColor: #ddd\\n      strokeDasharray: \\\"10 8\\\"\\n      strokeWidth: 2.0\\n      center: (0,0)\\n      width: random(300,500)\\n      height: random(300,500)\\n   }\\n   ensure contains( bbox, s1 )\\n   ensure contains( bbox, s2 )\\n   ensure contains( bbox, s3 )\\n   ensure contains( G.icon, bbox )\\n\\n}\\n\\n-- Rules for drawing closest silhouette points\\n\\nforall Point x; Shape S\\n{\\n   vec2 p = closestSilhouettePoint( S.icon, x.pos )\\n\\n   shape closestSegment = Line {\\n      start: x.pos\\n      end: p\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   scalar D = norm( (canvas.width, canvas.height) )\\n   shape continuedSegment = Line {\\n      start: p\\n      end: p + D*unit(p-x.pos)\\n      strokeColor: #00000033\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n      strokeDasharray: \\\"10 8\\\"\\n   }\\n\\n   shape closestDot = Circle {\\n      r: x.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n}\\n\\nforall Point x; Polyline L\\n{\\n   vec2 p = closestSilhouettePoint( L.icon, x.pos )\\n\\n   shape closestSegment = Line {\\n      start: x.pos\\n      end: p\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   scalar D = norm( (canvas.width, canvas.height) )\\n   shape continuedSegment = Line {\\n      start: p\\n      end: p + D*unit(p-x.pos)\\n      strokeColor: #00000033\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n      strokeDasharray: \\\"10 8\\\"\\n   }\\n\\n   shape closestDot = Circle {\\n      r: x.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n}\\n\\n-- Keep shapes from overlapping\\nforall Shape S1; Shape S2\\n{\\n   ensure disjoint( S1.icon, S2.icon )\\n}\\n\\n\";\n//# sourceMappingURL=closest-silhouette-point.style.js.map","export default \"type Point\\n\\ntype Shape\\ntype Line <: Shape\\ntype Polyline\\ntype Polygon <: Shape\\ntype Rectangle <: Shape\\ntype Circle <: Shape\\ntype Ellipse <: Shape\\n\\ntype Group <: Shape\\n\";\n//# sourceMappingURL=closest-silhouette-point.domain.js.map","import substance from \"./test.substance.js\";\nimport style0, { resolver as resolver0 } from \"./closest-silhouette-point.style.js\";\nimport domain from \"./closest-silhouette-point.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"CatfishDonkey135\"\n};\n//# sourceMappingURL=test.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","test_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,4CAA4C,EACjFC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,kBACf"}