{"version":3,"file":"test.trio-fbb31858.js","sources":["../../../examples/dist/geometric-queries/ray-intersect/test.substance.js","../../../examples/dist/geometric-queries/ray-intersect/ray-intersect.style.js","../../../examples/dist/geometric-queries/ray-intersect/test.trio.js"],"sourcesContent":["export default \"-- For each ray, finds the first intersection with each shape.\\n\\nRay r1\\nRay r2\\nRay r3\\nRay r4\\nRay r5\\n\\nEllipse E1\\nEllipse E2\\nEllipse E3\\nCircle C1\\nCircle C2\\nCircle C3\\nPolygon P1\\nPolygon P2\\nPolygon P3\\nRectangle R1\\nRectangle R2\\nRectangle R3\\nLine L1\\nLine L2\\nLine L3\\nLine L4\\nLine L5\\nPolyline M\\nGroup G1\\nGroup G2\\nGroup G3\\n\\n\";\n//# sourceMappingURL=test.substance.js.map","import { makeResolver } from \"../../resolver.js\";\nexport const resolver = makeResolver(\"geometric-queries/ray-intersect\");\nexport default \"canvas {\\n   width = 800\\n   height = 700\\n}\\n\\n-- Rules for drawing each type of shape\\n\\nforall Ray r {\\n   scalar W = canvas.width\\n   scalar H = canvas.height\\n   scalar x = -W/2 + 10\\n   scalar y = .95*H*random(-1,1)/2\\n   vec2 r.pos = (x,y)\\n   vec2 r.vec = (1000,?)\\n\\n   shape r.icon = Circle {\\n      center: r.pos\\n      r: 5\\n      fillColor: #000000ff\\n      ensureOnCanvas: false\\n   } \\n   shape r.arrow = Line {\\n      start: r.pos\\n      end: r.pos + 75*unit(r.vec)\\n      strokeWidth: 3\\n      strokeColor: #000\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: .5\\n      ensureOnCanvas: false\\n   } \\n   shape r.line = Line {\\n      start: r.pos\\n      end: r.pos + norm((canvas.width,canvas.height))*unit(r.vec)\\n      strokeColor: #000\\n      strokeWidth: 1.5\\n      style: \\\"dashed\\\"\\n      strokeDasharray: \\\"8,6\\\"\\n      ensureOnCanvas: false\\n   }\\n\\n   layer r.arrow above r.line\\n   layer r.icon above r.arrow\\n}\\n\\nforall Line L {\\n   shape L.icon = Line {\\n      start: (?,?)\\n      end: (?,?)\\n      strokeWidth: 5\\n   }\\n}\\n\\nforall Rectangle R {\\n   shape R.icon = Rectangle {\\n      center: (?, ?)\\n      width: random(30,80)\\n      height: random(30,80)\\n      strokeWidth: 1\\n   }\\n}\\n\\nforall Polyline P {\\n   scalar w = canvas.width/2\\n   scalar h = .9*canvas.height/2\\n   vec2 p0 = (w - random(0,100),h)\\n   vec2 p1 = (w - random(0,100),h/2)\\n   vec2 p2 = (w - random(0,100),0)\\n   vec2 p3 = (w - random(0,100),-h/2)\\n   vec2 p4 = (w - random(0,100),-h)\\n   \\n   shape P.icon = Polyline {\\n      points: [ p0, p1, p2, p3, p4 ]\\n      strokeWidth: 5.0\\n      strokeLinejoin: \\\"round\\\"\\n      strokeColor: sampleColor(1.0,\\\"rgb\\\")\\n      ensureOnCanvas: false\\n   }\\n}\\n\\nforall Polygon P {\\n\\n   vec2 c = (?,?)\\n   scalar t0 = 0*MathPI()/3 + random(-1,1)\\n   scalar t1 = 2*MathPI()/3 + random(-1,1)\\n   scalar t2 = 4*MathPI()/3 + random(-1,1)\\n   scalar r0 = 60 + random(-5,5)\\n   scalar r1 = 60 + random(-5,5)\\n   scalar r2 = 60 + random(-5,5)\\n\\n   vec2 p0 = c + r0*(cos(t0),sin(t0))\\n   vec2 p1 = c + r1*(cos(t1),sin(t1))\\n   vec2 p2 = c + r2*(cos(t2),sin(t2))\\n   \\n   shape P.icon = Polygon {\\n      points: [ p0, p1, p2 ]\\n   }\\n}\\n\\nforall Circle C {\\n   shape C.icon = Circle {\\n      center: (?,?)\\n      r: random(40,80)\\n   }\\n}\\n\\nforall Ellipse E {\\n   shape E.icon = Ellipse {\\n      rx: random(5,80)\\n      ry: random(5,80)\\n   }\\n}\\n\\nforall Group G {\\n   shape c1 = Circle {\\n      center: (?,?)\\n      r: random(20,40)\\n      fillColor: sampleColor(1,\\\"rgb\\\")\\n      ensureOnCanvas: false\\n   }\\n\\n   shape c2 = Circle {\\n      center: c1.center + 40*diskRandom()\\n      r: random(20,40)\\n      fillColor: c1.fillColor\\n      ensureOnCanvas: false\\n   }\\n\\n   shape c3 = Circle {\\n      center: c1.center + 40*diskRandom()\\n      r: random(20,40)\\n      fillColor: c1.fillColor\\n      ensureOnCanvas: false\\n   }\\n\\n   shape c4 = Circle {\\n      center: c1.center + 40*diskRandom()\\n      r: random(20,40)\\n      fillColor: c1.fillColor\\n      ensureOnCanvas: false\\n   }\\n\\n   shape G.icon = Group {\\n      shapes: [c1,c2,c3,c4]\\n   }\\n}\\n\\n-- Rules for drawing ray intersections\\n\\nforall Ray r; Shape S\\n{\\n   vec2 p = rayIntersect( S.icon, r.pos, r.vec )\\n   vec2 n = rayIntersectNormal( S.icon, r.pos, r.vec )\\n\\n   shape intersectDot = Circle {\\n      r: r.icon.r * norm(n)\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape intersectNormal = Line {\\n      start: p\\n      end: p + 30*n\\n      strokeColor: #888\\n      strokeWidth: 2\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: .5 * norm(n)\\n      ensureOnCanvas: false\\n   }\\n\\n   layer intersectDot above r.arrow\\n   layer intersectDot below r.icon\\n   layer intersectDot above S.icon\\n   layer intersectNormal below intersectDot\\n}\\n\\nforall Ray r; Ellipse E\\n{\\n   vec2 p = rayIntersect( E.icon, r.pos, r.vec )\\n   vec2 n = rayIntersectNormal( E.icon, r.pos, r.vec )\\n\\n   shape intersectDot = Circle {\\n      r: r.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape intersectNormal = Line {\\n      start: p\\n      end: p + 30*n\\n      strokeColor: #888\\n      strokeWidth: 2\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: .5\\n      ensureOnCanvas: false\\n   }\\n\\n   layer intersectDot above r.arrow\\n   layer intersectDot below r.icon\\n   layer intersectDot above E.icon\\n   layer intersectNormal below intersectDot\\n}\\n\\nforall Ray r; Polyline M\\n{\\n   vec2 p = rayIntersect( M.icon, r.pos, r.vec )\\n   vec2 n = rayIntersectNormal( M.icon, r.pos, r.vec )\\n\\n   shape intersectDot = Circle {\\n      r: r.icon.r\\n      center: p\\n      fillColor: #ffffffff\\n      strokeColor: #000000ff\\n      strokeWidth: 2\\n      ensureOnCanvas: false\\n   }\\n\\n   shape intersectNormal = Line {\\n      start: p\\n      end: p + 30*n\\n      strokeColor: #888\\n      strokeWidth: 2\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: .5\\n      ensureOnCanvas: false\\n   }\\n\\n   layer intersectDot above r.arrow\\n   layer intersectDot below r.icon\\n   layer intersectDot above M.icon\\n   layer intersectNormal below intersectDot\\n}\\n\\nforall Shape S; Ray r\\n{\\n   layer r.icon above S.icon\\n}\\n\\n-- Keep shapes from overlapping\\nforall Shape S1; Shape S2\\n{\\n   ensure disjoint( S1.icon, S2.icon )\\n}\\n\\n\";\n//# sourceMappingURL=ray-intersect.style.js.map","import substance from \"./test.substance.js\";\nimport style0, { resolver as resolver0 } from \"./ray-intersect.style.js\";\nimport domain from \"./ray-intersect.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"SnowflakeQuetzal3561\",\n    excludeWarnings: []\n};\n//# sourceMappingURL=test.trio.js.map"],"names":["substance","resolver","makeResolver","style0","test_trio","resolver0","domain"],"mappings":"+HAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,iCAAiC,EACtEC,EAAeuBACX,gBAAiB,CAAE,CACvB"}