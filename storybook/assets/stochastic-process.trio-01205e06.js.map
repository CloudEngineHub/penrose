{"version":3,"file":"stochastic-process.trio-01205e06.js","sources":["../../../examples/dist/stochastic-process/test.substance.js","../../../examples/dist/stochastic-process/stochastic-process.style.js","../../../examples/dist/stochastic-process/stochastic-process.domain.js","../../../examples/dist/stochastic-process/stochastic-process.trio.js"],"sourcesContent":["export default \"Point X0\\nStochasticProcess Xt\\nstartsAt( Xt, X0 )\\nPoint XT := endPoint( Xt )\\n-- Let s := Step( X0, XT )\\n\\nLabel Xt $X_t$\\nLabel X0 $x_k$\\nLabel XT $x_{k+1}$\\n\\n\";\n//# sourceMappingURL=test.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"stochastic-process\");\nexport default \"canvas {\\n   width = 288\\n   height = 162\\n\\n   shape background = Rectangle {\\n      center: (0,0)\\n      width: width\\n      height: height\\n      fillColor: #0002\\n      ensureOnCanvas: false\\n   }\\n}\\n\\nforall Point p {\\n   vec2 p.x = (?,?)\\n\\n   shape p.icon = Circle {\\n      center: p.x\\n      r: 2\\n      fillColor: #000\\n   }\\n}\\n\\nforall Point p\\nwhere p has label {\\n\\n   scalar theta = ?\\n   vec2 c = p.x + 10*(cos(theta),sin(theta))\\n\\n   p.labelText = Equation {\\n      center: c\\n      string: p.label\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n   }\\n}\\n\\nforall StochasticProcess X {\\n\\n   vec2 X.start = (0,0)\\n   mat2x2 A = 3*( (1,0), (0,1) )\\n   vec2 omega = .5*circleRandom()\\n\\n   X.curve = diffusionProcess( 190, X.start, A, omega )\\n\\n   shape X.path = Path {\\n      d: interpolatingSpline( \\\"open\\\", X.curve )\\n      strokeColor: #1b1f8a99\\n      strokeWidth: 1\\n   }\\n\\n   shape X.ball = Circle {\\n      center: X.start\\n      r: norm( X.start - lastPoint(X.curve) )\\n      fillColor: #1b1f8a33\\n      strokeColor: #888\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n\\n   shape X.shading = Image {\\n      href: \\\"ball-shading.svg\\\"\\n      center: X.ball.center\\n      width: 2*X.ball.r\\n      height: 2*X.ball.r\\n      opacity: .75\\n      ensureOnCanvas: false\\n   }\\n\\n   shape X.canvasRect = Rectangle {\\n      center: canvas.background.center\\n      width: canvas.background.width\\n      height: canvas.background.height\\n   }\\n   shape X.clippedBall = Group {\\n      shapes: [ X.ball, X.shading ]\\n      clipPath: clip( X.canvasRect )\\n      ensureOnCanvas: false\\n   }\\n\\n   shape X.clipBall = Circle {\\n      center: X.ball.center\\n      r: X.ball.r\\n      ensureOnCanvas: false\\n   }\\n   shape X.clippedPath = Group {\\n      shapes: [ X.path ]\\n      clipPath: clip( X.clipBall )\\n      ensureOnCanvas: false\\n   }\\n\\n   layer X.ball above X.shading\\n   layer X.path above X.ball\\n}\\n\\nforall StochasticProcess X\\nwhere X has label {\\n\\n   shape X.labelText = Equation {\\n      string: X.label\\n      center: averagePoint( X.curve )\\n      fillColor: #fff\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n\\n   -- Fake equation stroking by \\\"stamping\\\"\\n   -- many copies of the label\\n   scalar a = .5\\n   shape X.labelStroke0 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(1,0)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke1 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(1,1)/sqrt(2)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke2 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(0,1)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke3 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(-1,1)/sqrt(2)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke4 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(-1,0)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke5 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(-1,-1)/sqrt(2)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke6 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(0,-1)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n   shape X.labelStroke7 = Equation {\\n      string: X.label\\n      center: X.labelText.center + a*(1,-1)/sqrt(2)\\n      fillColor: #000\\n      fontSize: \\\"12px\\\"\\n      ensureOnCanvas: false\\n   }\\n\\n   layer X.labelText above X.labelStroke0\\n   layer X.labelText above X.labelStroke1\\n   layer X.labelText above X.labelStroke2\\n   layer X.labelText above X.labelStroke3\\n   layer X.labelText above X.labelStroke4\\n   layer X.labelText above X.labelStroke5\\n   layer X.labelText above X.labelStroke6\\n   layer X.labelText above X.labelStroke7\\n   layer X.labelText above X.path\\n}\\n\\nforall Point p; StochasticProcess X {\\n   layer p.icon above X.path\\n}\\n\\nforall Point p; StochasticProcess X\\nwhere p has label\\n{\\n   ensure disjoint( p.labelText, X.path )\\n}\\n\\nforall Point p; StochasticProcess X\\nwhere startsAt( X, p ) {\\n   override X.start = p.x\\n}\\n\\nforall Point p; StochasticProcess X\\nwhere p := endPoint( X ) {\\n   override p.x = lastPoint( X.curve )\\n}\\n\\nforall Step s; Point p0, p1\\nwhere s := Step( p0, p1 ) {\\n\\n   vec2 a = p0.x\\n   vec2 b = p1.x\\n   vec2 m = (a+b)/2\\n   scalar l  = norm(b-a)\\n   vec2 n = rot90((b-a)/l)\\n   vec2 c = m + l*n/5\\n\\n   shape s.icon = Path {\\n      d: quadraticCurveFromPoints( \\\"open\\\", [a, c, b] )\\n      fillColor: none()\\n      strokeColor: #1b1f8a\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n   vec2 u = unit(b-c)\\n   shape s.arrowhead = Line {\\n      start: b - 6.25*u\\n      end: b - .5*u\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: .5\\n      fillColor: none()\\n      strokeColor: #1b1f8a\\n      strokeWidth: 1.5\\n      ensureOnCanvas: false\\n   }\\n\\n   layer s.arrowhead above s.icon\\n   layer p1.icon above s.arrowhead\\n   layer p0.icon above s.arrowhead\\n}\\n\\n\";\n//# sourceMappingURL=stochastic-process.style.js.map","export default \"type StochasticProcess\\ntype Point\\ntype Step\\n\\nconstructor Step( Point p0, Point p1 )\\npredicate startsAt( StochasticProcess X, Point p )\\nfunction endPoint( StochasticProcess X ) -> Point\\n\\n\";\n//# sourceMappingURL=stochastic-process.domain.js.map","import substance from \"./test.substance.js\";\nimport style0, { resolver as resolver0 } from \"./stochastic-process.style.js\";\nimport domain from \"./stochastic-process.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"ChambrayGoose54176\"\n};\n//# sourceMappingURL=stochastic-process.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","stochasticProcess_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,oBAAoB,EACzDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,oBACf"}