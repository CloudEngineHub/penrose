{"version":3,"file":"caffeine.trio-34f02eac.js","sources":["../../../examples/dist/structural-formula/molecules/caffeine.substance.js","../../../examples/dist/structural-formula/structural-formula.style.js","../../../examples/dist/structural-formula/structural-formula.domain.js","../../../examples/dist/structural-formula/molecules/caffeine.trio.js"],"sourcesContent":["export default \"-- caffeine molecule, expressed via structural-formula DSL\\nCarbon C1, C2, C3, C4, C5, C6, C7, C8\\nNitrogen N1, N2, N3, N4\\nOxygen O1, O2\\nHydrogen H1, H2, H3, H4, H5, H6, H7, H8, H9, H10\\n\\nSingleBond(N2, C4)\\nSingleBond(C4, C5)\\nDoubleBond(C5, C6)\\nSingleBond(C6, N1)\\nSingleBond(N1, C2)\\nSingleBond(N2, C2)\\nDoubleBond(C2, O2)\\nSingleBond(N2, C1)\\nSingleBond(C1, H7)\\nSingleBond(C1, H6)\\nSingleBond(C1, H5)\\nDoubleBond(C4, O1)\\nSingleBond(C7, H4)\\nSingleBond(C7, H3)\\nSingleBond(H2, C7)\\nSingleBond(N3, C7)\\nSingleBond(N3, C5)\\nSingleBond(C8, N3)\\nDoubleBond(C8, N4)\\nSingleBond(N4, C6)\\nSingleBond(C8, H1)\\nSingleBond(C3, H10)\\nSingleBond(C3, H8)\\nSingleBond(C3, H9)\\nSingleBond(N1, C3)\\n\\nAutoLabel All\\n\";\n//# sourceMappingURL=caffeine.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"structural-formula\");\nexport default \"canvas {\\n   scalar width  = 1066.5\\n   scalar height = 600.0\\n}\\n\\nColors {\\n   vec4 clear     = rgba( 0., 0., 0., 0. )\\n   vec4 black     = rgba( 0., 0., 0., 1. )\\n   vec4 gray      = rgba( .5, .5, .5, 1. )\\n   vec4 white     = rgba( 1., 1., 1., 1. )\\n   vec4 red       = rgba( 1., 0., 0., 1. )\\n   vec4 blue      = rgba( 0., 0., 1., 1. )\\n   vec4 darkRed   = rgba( .7, 0., 0., 1. )\\n   vec4 darkBlue  = rgba( 0., 0., .7, 1. )\\n}\\n\\nGlobal {\\n   scalar atomRadius = 20.\\n   scalar bondLength = 60.\\n\\n   shape bbox = Rectangle {\\n      width : canvas.width\\n      height : canvas.height\\n      center : (0.,0.)\\n      fillColor : Colors.clear\\n      strokeColor : Colors.gray\\n   }\\n}\\n\\nforall Node n {\\n\\n   vec2 n.center = (?,?)\\n\\n   shape n.icon = Circle {\\n      r : Global.atomRadius\\n      center : n.center\\n      fillColor : Colors.white\\n      strokeColor : Colors.black\\n      strokeWidth : 2.\\n   }\\n\\n   shape n.background = Image {\\n      href : \\\"structural-formula-atom.svg\\\"\\n      center : n.center\\n      width : 4.*Global.atomRadius\\n      height : 4.*Global.atomRadius\\n   }\\n\\n   shape n.text = Text {\\n      string: n.label\\n      center: n.center\\n      fillColor: Colors.black\\n      fontSize: \\\"12px\\\"\\n      fontFamily: \\\"HelveticaNeue-CondensedBold, Helvetica Neue, Helvetica, Arial, sans-serif\\\"\\n      fontWeight: \\\"Bold\\\"\\n   }\\n\\n   ensure contains( Global.bbox, n.icon, 0. )\\n\\n   layer n.icon below n.text\\n   layer n.background below n.icon\\n   layer n.icon above Global.bbox\\n   layer n.background above Global.bbox\\n   layer n.text above Global.bbox\\n}\\n\\nforall FunctionalGroup g {\\n   override g.icon.fillColor = Colors.clear\\n   override g.icon.strokeColor = Colors.clear\\n   override g.text.fillColor = Colors.black\\n}\\n\\nforall Hydrogen a {\\n   override a.icon.fillColor = Colors.red\\n   override a.icon.strokeColor = Colors.darkRed\\n   override a.text.fillColor = Colors.white\\n   override a.text.string = \\\"H\\\"\\n}\\n\\nforall Carbon a {\\n   override a.icon.fillColor = Colors.black\\n   override a.icon.strokeColor = Colors.gray\\n   override a.text.fillColor = Colors.white\\n   override a.text.string = \\\"C\\\"\\n}\\n\\nforall Nitrogen a {\\n   override a.icon.fillColor = Colors.blue\\n   override a.icon.strokeColor = Colors.darkBlue\\n   override a.text.fillColor = Colors.white\\n   override a.text.string = \\\"N\\\"\\n}\\n\\nforall Oxygen a {\\n   override a.icon.fillColor = Colors.white\\n   override a.icon.strokeColor = Colors.gray\\n   override a.text.fillColor = Colors.black\\n   override a.text.string = \\\"O\\\"\\n}\\n\\nforall Node n1; Node n2\\nwhere SingleBond( n1, n2 ) {\\n\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   vec2 u = unit(x1-x2)\\n   scalar r = Global.atomRadius\\n\\n   shape line = Line {\\n      start : x1 - 1.3*r*u\\n        end : x2 + 1.3*r*u\\n      strokeWidth : 4.\\n      strokeColor : Colors.black\\n   }\\n\\n   encourage equal( norm(x1-x2), Global.bondLength )\\n\\n   layer line below n1.icon\\n   layer line below n2.icon\\n   layer n1.background below line\\n   layer n2.background below line\\n}\\n\\nforall Node n1; Node n2\\nwhere DoubleBond( n1, n2 ) {\\n\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   vec2 u = unit(x1-x2)\\n   vec2 v = ( -u[1], u[0] )\\n   scalar r = Global.atomRadius\\n\\n   shape line1 = Line {\\n      start : x1 - 1.3*r*u - .25*r*v\\n        end : x2 + 1.3*r*u - .25*r*v\\n      strokeWidth : 4.\\n      strokeColor : Colors.black\\n   }\\n\\n   shape line2 = Line {\\n      start : x1 - 1.3*r*u + .25*r*v\\n        end : x2 + 1.3*r*u + .25*r*v\\n      strokeWidth : 4.\\n      strokeColor : Colors.black\\n   }\\n\\n   encourage equal( norm(x1-x2), Global.bondLength )\\n\\n   layer line1 below n1.icon\\n   layer line2 below n1.icon\\n   layer line1 below n2.icon\\n   layer line2 below n2.icon\\n   layer n1.background below line1\\n   layer n2.background below line1\\n   layer n1.background below line2\\n   layer n2.background below line2\\n}\\n\\nforall Node n1; Node n2 {\\n   vec2 x1 = n1.center\\n   vec2 x2 = n2.center\\n   encourage equal( 200000./normsq(x1-x2), 0. )\\n   layer n1.background below n2.icon\\n   layer n2.background below n1.icon\\n}\\n\\n\";\n//# sourceMappingURL=structural-formula.style.js.map","export default \"-- structural-formula.domain\\n--\\n-- This Penrose Domain schema is used to encode molecular\\n-- structures in a format suitable for drawing a variety\\n-- of different kinds of molecular structure diagrams.\\n\\n-- a Node is any collection of atoms that is treated\\n-- as a single logical unit, such as a functional\\n-- group (or just a single atom)\\ntype Node\\n\\n-- a FunctionalGroup represents a collection of atoms\\n-- in the same molecule (such as an alcohol or ester)\\ntype FunctionalGroup <: Node\\n\\n-- an Atom represents a single atom within a larger\\n-- molecule (or as an isolated ion)\\ntype Atom <: Node\\n\\n-- specific types of atoms (more could be added here)\\ntype Hydrogen <: Atom\\ntype   Carbon <: Atom\\ntype Nitrogen <: Atom\\ntype   Oxygen <: Atom\\ntype   Sodium <: Atom\\ntype Chlorine <: Atom\\n\\n-- predicates used to specify bonds between Nodes\\npredicate SingleBond(Node n1, Node n2)\\npredicate DoubleBond(Node n1, Node n2)\\npredicate  IonicBond(Node n1, Node n2)\\n\\n-- a Molecule is a collection of Atoms, or more generally,\\n-- Nodes, held together by bonds.  It is not essential to\\n-- annotate which collections of Nodes are connected, but\\n-- grouping Nodes is helpful for, e.g., labeling molecules\\n-- and/or grouping reactants/products.\\ntype Molecule\\n\\npredicate Contains(Molecule m, Node n)\\n\\n-- these predicates are used to delineate reactants and\\n-- produces in a chemical equation\\npredicate IsReactant(Molecule m)\\npredicate IsProduct(Molecule m)\\n\\n-- a reaction involving all reactants and products\\ntype Reaction\\n\\n-- predicates to mark the type of reaction\\npredicate     IsNetForward(Reaction r)\\npredicate IsStoichiometric(Reaction r)\\npredicate    IsEquilibrium(Reaction r)\\npredicate  IsBidirectional(Reaction r)\\n\\n\";\n//# sourceMappingURL=structural-formula.domain.js.map","import substance from \"./caffeine.substance.js\";\nimport style0, { resolver as resolver0 } from \"../structural-formula.style.js\";\nimport domain from \"../structural-formula.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"\"\n};\n//# sourceMappingURL=caffeine.trio.js.map"],"names":["substance","resolver","makeResolver","style0","domain","caffeine_trio","resolver0"],"mappings":"wEAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,oBAAoB,EACzDC,EAAefC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECGAC,EAAA,CACX,UAAAL,EACA,MAAO,CACH,CAAE,SAAUG,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAF,EACA,UAAW,EACf"}