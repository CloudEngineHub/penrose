{"version":3,"file":"StagedDiagram.stories-ec3e0fd1.js","sources":["../../src/StagedDiagram.tsx"],"sourcesContent":["import { PathResolver } from \"@penrose/core\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Simple } from \"./Simple.js\";\nimport Logo from \"./icons/Logo.js\";\nimport Resample from \"./icons/Resample.js\";\n\nconst Container = styled.div`\n  position: relative;\n  border-radius: 10px;\n  border: 0.5px solid rgba(0, 0, 0, 0.2);\n  box-shadow: 0 5px 8px 0 rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  overflow: hidden;\n  min-height: 320px;\n`;\n\nconst StartOverlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  background-color: #0001;\n  font-size: 20px;\n  color: #000;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  cursor: pointer;\n`;\n\nconst Stage = styled.div<{ $active?: boolean }>`\n  border-radius: 5px;\n  background-color: ${(props) => (props.$active ? \"#40b4f7\" : \"#bbb\")};\n  padding: 1px 3px;\n  align-self: start;\n  color: white;\n`;\n\nconst StageContainer = styled.div`\n  display: flex;\n  margin-right: auto;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 14px;\n  width: 100%;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 10px 0px;\n`;\n\n// variation from SimpleProps is just the initial variation; the actual\n// variation is stored in state, can be changed by resampling\nexport default (props: {\n  trio: { substance: string; domain: string; style: string; variation: string };\n  imageResolver: PathResolver;\n}) => {\n  const { trio, imageResolver } = props;\n  const { variation, substance, style, domain } = trio;\n  const [currVariation, setVariation] = useState(variation);\n  const [stageIdx, setStageIdx] = useState(0);\n  const [start, setStart] = useState(false);\n  const [stages, setStages] = useState([\"\"]);\n\n  return (\n    <Container>\n      {start ? (\n        <>\n          <Simple\n            name={\"embed\"}\n            domain={domain}\n            substance={substance}\n            style={style}\n            variation={currVariation}\n            interactive={false}\n            animate={true}\n            stepSize={5}\n            imageResolver={imageResolver}\n            onFrame={(s) => {\n              setStages(s.optStages);\n              setStageIdx(s.currentStageIndex);\n            }}\n          />\n          <StageContainer>\n            {stages.map((stage, n) => {\n              const s = stage === \"\" ? \"default\" : stage;\n              return n === stageIdx ? (\n                <Stage $active>{s}</Stage>\n              ) : (\n                <Stage>{s}</Stage>\n              );\n            })}\n            <div\n              onClick={() => setVariation(Math.random().toString())}\n              style={{ cursor: \"pointer\" }}\n            >\n              <Resample size={28} color={\"black\"} />\n            </div>\n          </StageContainer>\n        </>\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <StartOverlay onClick={() => setStart(true)}>\n            Click to lay out the diagram\n          </StartOverlay>\n          <Logo width={350} color={\"#0001\"}></Logo>\n        </div>\n      )}\n    </Container>\n  );\n};\n"],"names":["Container","styled","StartOverlay","Stage","div","StageContainer","StagedDiagram$1","__name","props","trio","imageResolver","variation","substance","style","domain","currVariation","setVariation","useState","stageIdx","setStageIdx","start","setStart","stages","setStages","_jsx","_jsxs","_Fragment","Simple","stage","n","s","Resample","Logo"],"mappings":"uyBAOA,MAAAA,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUAC,EAAAD,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeAE,EAAAF,EAAA;AAAA;AAAA,sBAAqBG,GAAAA,EAAAA,QAAAA,UAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQrBC,EAAAJ,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaAK,EAAAC,EAAAC,GAAA,CAIE,KAAA,CAAM,KAAAC,EAAEA,cAAAA,CAAMC,EAAAA,EACd,CAAM,UAAAC,EAAEA,UAAAA,EAAWC,MAAAA,EAAWC,OAAAA,CAAOC,EAAAA,EACrC,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAN,CAAA,EACA,CAAAO,EAAAC,CAAA,EAAAF,EAAA,SAAA,CAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EACA,CAAAK,EAAAC,CAAA,EAAAN,EAAAA,SAAA,CAAA,EAAA,CAAA,EAEA,OAAAO,EAAAxB,EAAA,CACY,SAAAoB,EAAAK,EAAAC,EAAA,CAEN,SAAA,CAAAF,EAAAG,EAAA,CACS,KAAA,QACC,OAAAb,EACNA,UAAAA,EACAF,MAAAA,EACAC,UAAAA,EACWE,YAAAA,GACE,QAAA,GACJ,SAAA,EACC,cAAAL,EACVA,QAAAA,GAAAA,CAEEa,EAAAA,EAAAA,SAAAA,EACAJ,EAAAA,EAAAA,iBAAAA,CAA+B,CACjC,CAAA,EAAAM,EAAApB,EAAA,CAEa,SAAA,CAAAiB,EAAA,IAAA,CAAAM,EAAAC,IAAA,CAEX,MAAAC,EAAAF,IAAA,GAAA,UAAAA,EACA,OAAAC,IAAAX,EAAAM,EAAArB,EAAA,CACQ,QAAA,GAAQ,SAAA2B,CAAEA,CAAAA,EAAAA,EAAAA,EAAAA,CAEV,SAAAA,CAAEA,CAAAA,CAAS,CAAA,EAAAN,EAAA,MAAA,CAGrB,QAAA,IAAAR,EAAA,KAAA,OAAA,EAAA,SAAA,CAAA,EACsD,MAAA,CAC7C,OAAA,SAAU,EAAU,SAAAQ,EAAAO,EAAA,CAElB,KAAA,GAAO,MAAA,OAAW,CAAA,CAAU,CAAA,CAAA,CACjC,CAAA,CAAA,CACS,CAAA,EAAAN,EAAA,MAAA,CAGnB,MAAA,CACS,QAAA,OACI,WAAA,SACG,eAAA,QACI,EAClB,SAAA,CAAAD,EAAAtB,EAAA,CAEa,QAAA,IAAAmB,EAAA,EAAA,EAA6B,SAAA,8BAAG,CAAA,EAAAG,EAAAQ,EAAA,CAGxC,MAAA,IAAQ,MAAA,OAAY,CAAA,CAAA,CAAgB,CAAA,CACtC,CAAA,CAIb,EA/DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}