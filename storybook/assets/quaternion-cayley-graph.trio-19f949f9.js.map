{"version":3,"file":"quaternion-cayley-graph.trio-19f949f9.js","sources":["../../../examples/dist/group-theory/CayleyGraph.style.js","../../../examples/dist/group-theory/quaternion-cayley-graph.trio.js"],"sourcesContent":["import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"group-theory\");\nexport default \"-- Draws a Cayley graph for a group G, assuming that\\n--   (i) all elements g of G have been declared as an Element,\\n--   (ii) all generator s of G have been tagged, via IsGenerator(), and\\n--   (iii) the group multiplication table has been specified, via IsProduct.\\n-- For drawing the Cayley graph, it is not strictly necessary to specify the\\n-- entire multiplication table: one can instead just specify the subset of\\n-- the table corresponding to right-multiplication by any generator.  However,\\n-- for other Styles in the domain Group, it may be helpful to generate Substance\\n-- files that specify the full table.\\n\\ncanvas {\\n    width = 240\\n    height = 200\\n}\\n\\ncolors {\\n   white = rgba( 1., 1., 1., 1. )\\n   lightGray = rgba( .8, .8, .8, 1. )\\n   mediumGray = rgba( .6, .6, .6, 1. )\\n   darkGray = rgba( .4, .4, .4, 1. )\\n}\\n\\nglobal {\\n   scalar targetEdgeLength = 40.\\n   scalar pathWidth = 1.\\n   scalar pathOutlineWidth = 3.\\n}\\n\\n-- draw each group element as a dot\\nforall Element g\\n{\\n   shape g.icon = Circle {\\n      r: 5.0 -- radius\\n      fillColor: colors.lightGray\\n      strokeColor: colors.mediumGray\\n      strokeWidth: .55\\n      ensureOnCanvas: true\\n   }\\n\\n   shape g.labelText = Equation {\\n       string: g.label\\n       center: g.icon.center\\n       fontSize: \\\"5px\\\"\\n       fillColor: colors.darkGray\\n   }\\n}\\n\\n-- draw a circle around the identity element\\nforall Element e\\nwhere IsIdentity(e)\\n{\\n   shape identityMarker = Circle {\\n      center: e.icon.center\\n      r: 1.5*e.icon.r\\n      fillColor: rgba(0,0,0,.1)\\n   }\\n}\\n\\n -- highlight any generating element by changing its color\\n forall Element s\\n where IsGenerator(s)\\n {\\n    scalar r = ?\\n    scalar g = ?\\n    scalar b = ?\\n    ensure inRange(r,.25,1.0)\\n    ensure inRange(g,.25,1.0)\\n    ensure inRange(b,.25,1.0)\\n\\n    override s.icon.fillColor = rgba(r,g,b,1.0)\\n    override s.icon.strokeColor = rgba(.7*r,.7*g,.7*b,1.0)\\n    override s.labelText.fillColor = s.icon.strokeColor\\n }\\n\\n-- encourage all nodes to avoid each other\\nforall Element g1; Element g2\\n{\\n   vec2 x1 = g1.icon.center\\n   vec2 x2 = g2.icon.center\\n   scalar d = norm( x1 - x2 )\\n\\n   -- minimize a Coulomb potential\\n   encourage equal( 0., 2.*sqr(1000./d) )\\n\\n   -- minimize IPC potential\\n   -- scalar dhat = 10.*g1.icon.r\\n   --encourage equal( 0., max(0, -sqr(d - dhat)*log(d/dhat))) \\n}\\n\\n-- rule for any two elements g1, g2 related by a generator s\\nforall Element g1; Element g2; Element s\\nwhere IsGenerator(s); IsProduct( g2, g1, s )\\n{\\n   -- draw an arrow from g1 to g2\\n   vec2 x0 = g1.icon.center\\n   vec2 x2 = g2.icon.center\\n   vec2 u = (x2-x0)/norm(x2-x0)\\n   vec2 n = rot90(u)\\n   vec2 p0 = x0\\n   vec2 p2 = x2 - 10*u + 3*n\\n   vec2 m = (p0+p2)/2\\n   vec2 p1 = m + 3.*n\\n   shape orientedPath = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: s.icon.fillColor\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.75\\n      strokeWidth: global.pathWidth\\n   }\\n   shape pathOutline = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: colors.white\\n      endArrowhead: \\\"none\\\"\\n      strokeWidth: global.pathOutlineWidth\\n   }\\n   layer pathOutline below orientedPath\\n\\n   -- encourage these nodes to be close together, by minimizing a spring energy\\n   vec2 x1 = g1.icon.center\\n   scalar d = norm( x1 - x2 )\\n   scalar k = 1. -- spring stiffness\\n   scalar L = global.targetEdgeLength -- rest length\\n   encourage equal( 0., k*(d-L)*(d-L)/2. ) -- minimize ½ k(d-L)²\\n}\\n\\n-- same rule as above, but catches the special case where g1 is the identity\\n-- (since we don't currently support matching on non-distinct tuples)\\nforall Element s; Element e\\nwhere IsGenerator(s); IsProduct( s, e, s )\\n{\\n   -- draw an arrow from e to s\\n   vec2 x0 = e.icon.center\\n   vec2 x2 = s.icon.center\\n   vec2 u = (x2-x0)/norm(x2-x0)\\n   vec2 n = rot90(u)\\n   vec2 p0 = x0\\n   vec2 p2 = x2 - 10*u + 3*n\\n   vec2 m = (p0+p2)/2\\n   vec2 p1 = m + 3.*n\\n   shape orientedPath = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: s.icon.fillColor\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.75\\n      strokeWidth: global.pathWidth\\n   }\\n   shape pathOutline = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: colors.white\\n      endArrowhead: \\\"none\\\"\\n      strokeWidth: global.pathOutlineWidth\\n   }\\n   layer pathOutline below orientedPath\\n\\n   -- encourage these nodes to be close together, by minimizing a spring energy\\n   vec2 x1 = e.icon.center\\n   scalar d = norm( x1 - x2 )\\n   scalar k = 1. -- spring stiffness\\n   scalar L = global.targetEdgeLength -- rest length\\n   encourage equal( 0., k*(d-L)*(d-L)/2. ) -- minimize ½ k(d-L)²\\n}\\n\\n-- same rule as above, but catches the special case where g1 = s\\n-- (since we don't currently support matching on non-distinct tuples)\\nforall Element g; Element s\\nwhere IsGenerator(s); IsProduct( g, s, s )\\n{\\n   -- draw an arrow from s to g\\n   vec2 x0 = s.icon.center\\n   vec2 x2 = g.icon.center\\n   vec2 u = (x2-x0)/norm(x2-x0)\\n   vec2 n = rot90(u)\\n   vec2 p0 = x0\\n   vec2 p2 = x2 - 10*u + 3*n\\n   vec2 m = (p0+p2)/2\\n   vec2 p1 = m + 3.*n\\n   shape orientedPath = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: s.icon.fillColor\\n      endArrowhead: \\\"straight\\\"\\n      endArrowheadSize: 0.75\\n      strokeWidth: global.pathWidth\\n   }\\n   shape pathOutline = Path {\\n      d: interpolateQuadraticFromPoints( \\\"open\\\", p0, p1, p2 )\\n      strokeColor: colors.white\\n      endArrowhead: \\\"none\\\"\\n      strokeWidth: global.pathOutlineWidth\\n   }\\n   layer pathOutline below orientedPath\\n\\n   -- encourage these nodes to be close together, by minimizing a spring energy\\n   vec2 x1 = s.icon.center\\n   scalar d = norm( x1 - x2 )\\n   scalar k = 1. -- spring stiffness\\n   scalar L = global.targetEdgeLength -- rest length\\n   encourage equal( 0., k*(d-L)*(d-L)/2. ) -- minimize ½ k(d-L)²\\n}\\n\";\n//# sourceMappingURL=CayleyGraph.style.js.map","import substance from \"./groups/quaternions.substance.js\";\nimport style0, { resolver as resolver0 } from \"./CayleyGraph.style.js\";\nimport domain from \"./Group.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"MeadowbrookChimpanzee02726\"\n};\n//# sourceMappingURL=quaternion-cayley-graph.trio.js.map"],"names":["resolver","makeResolver","style0","quaternionCayleyGraph_trio","substance","resolver0","domain"],"mappings":"8HACO,MAAMA,EAAWC,EAAa,cAAc,EACnDC,EAAef"}