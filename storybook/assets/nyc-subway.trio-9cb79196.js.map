{"version":3,"file":"nyc-subway.trio-9cb79196.js","sources":["../../../examples/dist/graph-domain/other-examples/nyc-subway.substance.js","../../../examples/dist/graph-domain/simple-curved-graph-boxes.style.js","../../../examples/dist/graph-domain/other-examples/nyc-subway.trio.js"],"sourcesContent":["export default \"\\nVertex TimesSquare, GrandCentral, WallStreet, UnionSquare, CentralPark, Broadway, FultonStreet, ConeyIsland, BarclaysCenter, JFKAirport\\n\\nEdge(TimesSquare, GrandCentral)\\nEdge(TimesSquare, UnionSquare)\\nEdge(GrandCentral, UnionSquare)\\nEdge(GrandCentral, WallStreet)\\nEdge(WallStreet, FultonStreet)\\nEdge(UnionSquare, Broadway)\\nEdge(Broadway, CentralPark)\\nEdge(CentralPark, TimesSquare)\\nEdge(FultonStreet, BarclaysCenter)\\nEdge(BarclaysCenter, ConeyIsland)\\nEdge(JFKAirport, FultonStreet)\\n\\nAutoLabel All\\n\";\n//# sourceMappingURL=nyc-subway.substance.js.map","import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"graph-domain\");\nexport default \"canvas {\\n  width = 800\\n  height = 800\\n}\\n\\nlayout = [boxes, text, adjust]\\n\\ncolor {\\n  black = #000000\\n  white = #ffffff\\n}\\n\\nnum {\\n  radius = 5\\n  labelDist = 5\\n  edgeDist = 100\\n  repelDist = 1.5 * edgeDist\\n}\\n\\nforall Vertex v {\\n  v.center = (?, ?)\\n\\n  v.text = Text {\\n    center: v.center\\n    string: v.label\\n    fillColor: color.black\\n    fontFamily: \\\"serif\\\"\\n    fontSize: \\\"18px\\\"\\n    strokeColor: color.white\\n    strokeWidth: 4\\n    paintOrder: \\\"stroke\\\"\\n  }\\n\\n  scalar padding = 5\\n  v.box = Rectangle {\\n    center: v.center\\n    width: padding + v.text.width\\n    height: padding + v.text.height\\n    fillColor : #0000\\n    strokeColor : color.black\\n    strokeWidth: 1\\n  }\\n  v.box2 = Rectangle {\\n    center: v.center\\n    width: padding + v.text.width\\n    height: padding + v.text.height\\n    fillColor : #ffffffff\\n    strokeColor : #0000\\n  }\\n  v.text above v.box2 \\n  v.box above v.text\\n\\n  encourage shapeDistance(v.box, v.text) == num.labelDist except boxes\\n}\\n\\nforall Vertex u; Vertex v {\\n  d = vdist(u.box.center, v.box.center)\\n  dHat = num.repelDist\\n  -- equation 6 from https://ipc-sim.github.io/\\n  encourage minimal(max(0, -sqr(d - dHat) * log(d / dHat))) in boxes\\n\\n  ensure disjoint(u.box, v.box, num.labelDist) in text\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e {\\n  a = u.box.center\\n  b = v.box.center\\n\\n  vec2 p1 = (?, ?)\\n  vec2 p2 = (?, ?)\\n  vec2 p3 = (?, ?)\\n  vec2 p4 = (?, ?)\\n  vec2 p5 = (?, ?)\\n  vec2 p6 = (?, ?)\\n  vec2 p7 = (?, ?)\\n  vec2 p8 = (?, ?)\\n  vec2 p9 = (?, ?)\\n\\n  radius = 6\\n  shape e.c1 = Circle {\\n      center: p1\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c2 = Circle {\\n      center: p2\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c3 = Circle {\\n      center: p3\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c4 = Circle {\\n      center: p4\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c5 = Circle {\\n      center: p5\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c6 = Circle {\\n      center: p6\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c7 = Circle {\\n      center: p7\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c8 = Circle {\\n      center: p8\\n      r: radius\\n      fillColor: #0000\\n  }\\n  shape e.c9 = Circle {\\n      center: p9\\n      r: radius\\n      fillColor: #0000\\n  }\\n\\n  shape e.poly = Polyline {\\n    points: [a, p1, p2, p3, p4, p5, p6, p7, p8, p9, b]\\n    strokeWidth: 2\\n    strokeColor: #000\\n  }\\n\\n  encourage minimal(elasticEnergy(e.poly.points, false))\\n  encourage isEquilateral(e.poly.points, false)\\n\\n  e.start = a\\n  e.end = b\\n  e.arrow = Line {\\n    start: a\\n    end: b\\n    strokeColor: #0000\\n  }\\n\\n  e.arrow below u.box\\n  e.arrow below v.box\\n\\n  -- -- Gravity - very optional and useless\\n  -- encourage minimal(a[1])\\n  -- encourage minimal(b[1])\\n\\n  encourage vdist(u.box.center, v.box.center) < num.edgeDist in boxes\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e; u has label {\\n  ensure disjoint(u.box, e.c3) in adjust\\n  ensure disjoint(u.box, e.c4) in adjust\\n  ensure disjoint(u.box, e.c5) in adjust\\n  ensure disjoint(u.box, e.c6) in adjust\\n  ensure disjoint(u.box, e.c7) in adjust\\n  u.box2 above e.poly\\n}\\n\\nforall Vertex u; Vertex v where Edge(u, v) as e; v has label {\\n  ensure disjoint(v.box, e.c3) in adjust\\n  ensure disjoint(v.box, e.c4) in adjust\\n  ensure disjoint(v.box, e.c5) in adjust\\n  ensure disjoint(v.box, e.c6) in adjust\\n  ensure disjoint(v.box, e.c7) in adjust\\n  v.box2 above e.poly\\n}\\n\\nforall Vertex u; Vertex v; Vertex w where Edge(u, v) as e; w has label {\\n  ensure disjoint(w.box, e.c3) in adjust\\n  ensure disjoint(w.box, e.c4) in adjust\\n  ensure disjoint(w.box, e.c5) in adjust\\n  ensure disjoint(w.box, e.c6) in adjust\\n  ensure disjoint(w.box, e.c7) in adjust\\n  w.box2 above e.poly\\n}\\n\";\n//# sourceMappingURL=simple-curved-graph-boxes.style.js.map","import substance from \"./nyc-subway.substance.js\";\nimport style0, { resolver as resolver0 } from \"../simple-curved-graph-boxes.style.js\";\nimport domain from \"../simple-graph.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"BasilTapir4665\"\n};\n//# sourceMappingURL=nyc-subway.trio.js.map"],"names":["substance","resolver","makeResolver","style0","nycSubway_trio","resolver0","domain"],"mappings":"8HAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECCFC,EAAWC,EAAa,cAAc,EACnDC,EAAegBACf"}