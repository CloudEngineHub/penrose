{"version":3,"file":"geometry.domain-952a3e66.js","sources":["../../../examples/dist/geometry-domain/geometry.domain.js"],"sourcesContent":["export default \"-- ~~~~~~~~~~~~~~~~ TYPES ~~~~~~~~~~~~~~~~\\ntype Shape\\ntype Point <: Shape\\ntype Linelike <: Shape\\ntype Ray <: Linelike\\ntype Line <: Linelike\\ntype Segment <: Linelike\\n\\ntype Angle <: Shape\\n\\ntype Triangle <: Shape\\ntype Quadrilateral <: Shape\\ntype Rectangle <: Quadrilateral\\ntype Circle <: Shape\\n\\ntype Plane <: Shape\\n\\n-- ~~~~~~~~~~~~~~~~ CONSTRUCTORS ~~~~~~~~~~~~~~~~\\n-- Lines and Points\\nconstructor Segment(Point p, Point q)\\nconstructor Ray(Point base, Point direction)\\nconstructor Line(Point p, Point q)\\nconstructor Midpoint(Linelike l) -> Point\\n\\n-- Angles\\nconstructor InteriorAngle(Point p, Point q, Point r) -> Angle\\n\\n-- Polygons/Shapes\\nconstructor Triangle(Point p, Point q, Point r)\\nconstructor Rectangle(Point p, Point q, Point r, Point s)\\nconstructor Quadrilateral(Point p, Point q, Point r, Point s)\\nconstructor CircleR(Point center, Point radius) -> Circle\\n-- constructor CircleD(Point diam1, Point diam2) -> Circle  -- TODO can be reimplemented when #621 is resolved\\n\\n-- ~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~\\n-- Lines and Points\\nfunction Bisector(Angle) -> Ray\\nfunction PerpendicularBisector(Segment, Point) -> Segment\\nfunction PerpendicularBisectorLabelPts(Segment, Point, Point) -> Segment -- same as PerpendicularBisector but it takes a segment + 2 points as args for labeling\\n\\n-- Polygons/Shapes\\nfunction MidSegment(Triangle, Point, Point) -> Segment\\nfunction Radius(Circle c, Point p) -> Segment\\nfunction Chord(Circle c, Point p, Point q) -> Segment\\nfunction Diameter(Circle c, Point p, Point q) -> Segment\\n\\n-- Unimplemented\\n-- function Sum(Angle, Angle) -> Angle\\n-- function Intersection(Linelike, Linelike) -> Point\\n-- function Altitude(Triangle, Angle) -> Segment\\n-- function Endpoint(Segment) -> Point\\n\\n-- ~~~~~~~~~~~~~~~~ PREDICATES ~~~~~~~~~~~~~~~~\\n-- Lines and Points\\npredicate On(Point, Linelike)\\npredicate In(Point, Plane)\\npredicate Midpoint(Linelike, Point)\\npredicate Collinear(Point, Point, Point)\\npredicate ParallelMarker1(Linelike, Linelike)\\npredicate EqualLengthMarker(Linelike, Linelike)\\npredicate EqualLength(Linelike, Linelike)\\npredicate Parallel(Linelike, Linelike)\\n\\n-- Angles\\npredicate Acute(Angle) \\npredicate Obtuse(Angle) \\npredicate RightMarked(Angle)\\npredicate RightUnmarked(Angle)\\npredicate AngleBisector(Angle, Linelike)\\npredicate EqualAngleMarker(Angle, Angle)\\npredicate EqualAngle(Angle, Angle)\\n\\n-- Polygons/Shapes\\npredicate Parallelogram(Quadrilateral)\\npredicate OnCircle(Circle, Point)\\npredicate CircleCenter(Circle, Point)\\npredicate Incenter(Point, Triangle)\\npredicate Orthocenter(Point, Triangle)\\npredicate Centroid(Point, Triangle)\\npredicate Circumcenter(Point, Triangle)\\n\\n-- notation \\\"{p, q}\\\" ~ \\\"Segment(p, q)\\\"\\n-- notation \\\"{p, q, r}\\\" ~ \\\"Triangle(p, q, r)\\\"\\n-- notation \\\"{p, q, r, s}\\\" ~ \\\"Rectangle(p, q, r, s)\\\"\\n-- notation \\\"âˆ (p, q, r)\\\" ~ \\\"InteriorAngle(p, q, r)\\\"\";\n//# sourceMappingURL=geometry.domain.js.map"],"names":["domain"],"mappings":"AAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}