{"version":3,"file":"osculating-circle.trio-886665c8.js","sources":["../../../examples/dist/curve-examples/osculating-circle.style.js","../../../examples/dist/curve-examples/osculating-circle.trio.js"],"sourcesContent":["import { makeResolver } from \"../resolver.js\";\nexport const resolver = makeResolver(\"curve-examples\");\nexport default \"canvas {\\n  width = 800\\n  height = 800\\n}\\n\\nlayout = [convex, blob]\\n\\nsettings {\\n  scale = 60\\n  tension = 0.19\\n  dotRadius = 5\\n  dotColor = #000 \\n  tangentColor = #112b9eff\\n  normalColor = #a01111ff\\n  arrowThickness = 3\\n  arrowSize = .5\\n}\\n\\nforall Curve c {\\n\\n  points = [(?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?), (?, ?)]\\n\\n  shape curve = Path {\\n    d: interpolatingSpline( \\\"closed\\\", points, settings.tension )\\n    strokeColor: #0a600a7b\\n    strokeWidth: 2\\n    strokeLinejoin: \\\"round\\\"\\n  }\\n\\n  ts = tangentVectors(points, true)\\n  ns = normalVectors(points, true)\\n  cs = curvatures(points, true)\\n\\n  shape dot = Circle {\\n    center: (points[0][0], points[0][1])\\n    r: settings.dotRadius\\n    fillColor: settings.dotColor\\n  }\\n\\n  scalar centerX = points[0][0] + 1 / cs[0] * ns[0][0]\\n  scalar centerY = points[0][1] + 1 / cs[0] * ns[0][1]\\n  shape osculatingCenter = Circle {\\n    center: (centerX, centerY)\\n    r: settings.dotRadius\\n    fillColor: settings.dotColor\\n  }\\n  shape osculatingCircle = Circle {\\n    center: (centerX, centerY)\\n    r: 1 / cs[0]\\n    fillColor: #0000\\n    strokeColor: #000\\n    strokeWidth: 1\\n  }\\n\\n  lineT = Line {\\n\\tstart: (points[0][0], points[0][1])\\n\\tend: (points[0][0] + settings.scale * ts[0][0], points[0][1] + settings.scale * ts[0][1])\\n\\tstrokeColor: settings.tangentColor\\n\\tstrokeWidth: settings.arrowThickness\\n    endArrowhead: \\\"straight\\\"\\n    endArrowheadSize: settings.arrowSize\\n  }\\n\\n  dot above lineT\\n\\n  lineN = Line {\\n    start: (points[0][0], points[0][1])\\n    end: (points[0][0] + settings.scale * ns[0][0], points[0][1] + settings.scale * ns[0][1])\\n    strokeColor: settings.normalColor\\n    strokeWidth: settings.arrowThickness\\n    endArrowhead: \\\"straight\\\"\\n    endArrowheadSize: settings.arrowSize\\n  }\\n\\n  dot above lineN\\n\\n  ensure isEquilateral(points, true)\\n  ensure signedArea(points, true) == 60000 in convex\\n  ensure perimeter(points, true) == 1000\\n\\n}\";\n//# sourceMappingURL=osculating-circle.style.js.map","import substance from \"./cubic-bezier.substance.js\";\nimport style0, { resolver as resolver0 } from \"./osculating-circle.style.js\";\nimport domain from \"./curves.domain.js\";\nexport default {\n    substance,\n    style: [\n        { contents: style0, resolver: resolver0 },\n    ],\n    domain,\n    variation: \"RetroKouprey113\",\n    excludeWarnings: []\n};\n//# sourceMappingURL=osculating-circle.trio.js.map"],"names":["resolver","makeResolver","style0","osculatingCircle_trio","substance","resolver0","domain"],"mappings":"iLACO,MAAMA,EAAWC,EAAa,gBAAgB,EACrDC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCCAC,EAAA,CACX,UAAAC,EACA,MAAO,CACH,CAAE,SAAUF,EAAQ,SAAUG,CAAW,CAC5C,EACD,OAAAC,EACA,UAAW,kBACX,gBAAiB,CAAE,CACvB"}