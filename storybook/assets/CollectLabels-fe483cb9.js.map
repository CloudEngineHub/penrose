{"version":3,"file":"CollectLabels-fe483cb9.js","sources":["../../../core/dist/utils/CollectLabels.js"],"sourcesContent":["import { browserAdaptor } from \"mathjax-full/js/adaptors/browserAdaptor.js\";\nimport { RegisterHTMLHandler } from \"mathjax-full/js/handlers/html.js\";\nimport { TeX } from \"mathjax-full/js/input/tex.js\";\nimport { AllPackages } from \"mathjax-full/js/input/tex/AllPackages.js\";\nimport { mathjax } from \"mathjax-full/js/mathjax.js\";\nimport { SVG } from \"mathjax-full/js/output/svg.js\";\nimport { err, ok } from \"./Error.js\";\nimport { getAdValueAsString, getValueAsShapeList, safe } from \"./Util.js\";\nexport const mathjaxInit = () => {\n    // https://github.com/mathjax/MathJax-demos-node/blob/master/direct/tex2svg\n    // const adaptor = chooseAdaptor();\n    const adaptor = browserAdaptor();\n    RegisterHTMLHandler(adaptor);\n    const tex = new TeX({\n        packages: AllPackages,\n        macros: {\n            textsc: [\"\\\\style{font-variant-caps: small-caps}{\\\\text{#1}}\", 1],\n        },\n        inlineMath: [\n            [\"$\", \"$\"],\n            [\"\\\\(\", \"\\\\)\"],\n        ],\n        processEscapes: true,\n        // https://github.com/mathjax/MathJax-demos-node/issues/25#issuecomment-711247252\n        formatError: (jax, err) => {\n            throw Error(err.message);\n        },\n    });\n    const svg = new SVG({ fontCache: \"none\" });\n    const html = mathjax.document(\"\", { InputJax: tex, OutputJax: svg });\n    const convert = (input) => {\n        // HACK: workaround for newlines. This workaround will force MathJax to always return the same heights regardless of the text content.\n        // https://github.com/mathjax/MathJax/issues/2312#issuecomment-538185951\n        // if(input) {\n        //   const newline_escaped = `\\\\displaylines{${input}}`;\n        // }\n        try {\n            const node = html.convert(input, {});\n            return ok(node.firstChild);\n        }\n        catch (error) {\n            return err(error.message);\n        }\n    };\n    return convert;\n};\nconst parseFontSize = (fontSize) => {\n    const regex = /^(\\d+(?:\\.\\d+)?)\\s*(px|in|cm|mm)$/;\n    const match = fontSize.match(regex);\n    if (!match) {\n        return;\n    }\n    const number = parseFloat(match[1]);\n    const unit = match[2];\n    return { number, unit };\n};\n// Convert from a font size in absolute unit (px, in, cm, mm) to pixels\nconst toPxFontSize = (number, unit) => {\n    const inPX = {\n        px: 1,\n        in: 96,\n        cm: 96 / 2.54,\n        mm: 96 / 25.4, // 10 mm to a cm\n    };\n    return inPX[unit] * number;\n};\n/**\n * Call MathJax to render __non-empty__ labels.\n */\nconst tex2svg = async (properties, convert) => new Promise((resolve) => {\n    const contents = getAdValueAsString(properties.string, \"\");\n    const fontSize = getAdValueAsString(properties.fontSize, \"\");\n    // Raise error if string or fontSize are empty or optimized\n    if (fontSize === \"\" || contents === \"\") {\n        resolve(err(`Label 'string' and 'fontSize' must be non-empty and non-optimized for ${properties.name.contents}`));\n    }\n    // Render the label\n    const output = convert(contents);\n    if (output.isErr()) {\n        resolve(err(`MathJax could not render $${contents}$: ${output.error}`));\n        return;\n    }\n    const body = output.value;\n    const viewBox = body.getAttribute(\"viewBox\");\n    if (viewBox === null) {\n        resolve(err(`No ViewBox found for MathJax output $${contents}$`));\n        return;\n    }\n    // Get re-scaled dimensions of label according to\n    // https://github.com/mathjax/MathJax-src/blob/32213009962a887e262d9930adcfb468da4967ce/ts/output/svg.ts#L248\n    // all viewbox units are divided by 1000 because MathJax scaled them by 1000\n    // these viewbox props are in em units * 1000\n    const viewBoxArr = viewBox.split(\" \");\n    const width = parseFloat(viewBoxArr[2]) / 1000;\n    const height = parseFloat(viewBoxArr[3]) / 1000;\n    // the vertical align adjustment and height in ex unit. This is used to avoid dealing with ex to px conversion\n    const d = -parseFloat(body.style.verticalAlign);\n    const exH = parseFloat(body.getAttribute(\"height\"));\n    // em is really the pixel value of the font size\n    const parsedFontSize = parseFontSize(fontSize);\n    if (parsedFontSize) {\n        const { number, unit } = parsedFontSize;\n        const em_to_px = (n) => n * toPxFontSize(number, unit);\n        const scaledWidth = em_to_px(width);\n        const scaledHeight = em_to_px(height);\n        const scaledD = (d / exH) * scaledHeight;\n        const scaledDescent = scaledD;\n        const scaledAscent = scaledHeight - scaledDescent; // HACK: interpreting ascent to be height - descent, which might be very wrong\n        resolve(ok({\n            body,\n            width: scaledWidth,\n            height: scaledHeight,\n            descent: scaledDescent,\n            ascent: scaledAscent,\n        }));\n    }\n    else {\n        resolve(err('Invalid font size format. Only \"px\", \"in\", \"cm\", and \"mm\" units are supported.'));\n        return;\n    }\n});\nconst floatV = (contents) => ({\n    tag: \"FloatV\",\n    contents,\n});\nconst textData = (width, height, descent, ascent) => ({\n    tag: \"TextData\",\n    width: floatV(width),\n    height: floatV(height),\n    descent: floatV(descent),\n    ascent: floatV(ascent),\n});\nconst equationData = (width, height, ascent, descent, rendered) => ({\n    tag: \"EquationData\",\n    width: floatV(width),\n    height: floatV(height),\n    ascent: floatV(ascent),\n    descent: floatV(descent),\n    rendered,\n});\n/**\n * Get the CSS string for the font setting of a `Text` shape.\n * @param shape A text shape\n *\n * NOTE: the `font` CSS rule -> https://developer.mozilla.org/en-US/docs/Web/CSS/font\n *\n * @returns a CSS rule string of its font settings\n */\nexport const toFontRule = (properties) => {\n    const fontFamily = getAdValueAsString(properties.fontFamily);\n    const fontSize = getAdValueAsString(properties.fontSize);\n    const fontStretch = getAdValueAsString(properties.fontStretch);\n    const fontStyle = getAdValueAsString(properties.fontStyle);\n    const fontVariant = getAdValueAsString(properties.fontVariant);\n    const fontWeight = getAdValueAsString(properties.fontWeight);\n    const lineHeight = getAdValueAsString(properties.lineHeight);\n    /**\n     * assemble according to the rules in https://developer.mozilla.org/en-US/docs/Web/CSS/font\n     * it must include values for: <font-size> <font-family>\n     * it may optionally include values for: <font-style> <font-variant> <font-weight> <font-stretch> <line-height>\n     * font-style, font-variant and font-weight must precede font-size\n     * font-variant may only specify the values defined in CSS 2.1, that is normal and small-caps\n     * font-stretch may only be a single keyword value.\n     * line-height must immediately follow font-size, preceded by \"/\", like this: \"16px/3\"\n     * font-family must be the last value specified.\n     */\n    const fontSpec = `${fontStretch} ${fontStyle} ${fontVariant} ${fontWeight} ${fontSize} ${fontFamily}`;\n    const fontString = lineHeight !== \"\" ? fontSpec.concat(`/${lineHeight}`) : fontSpec;\n    return fontString;\n};\n// https://stackoverflow.com/a/44564236\nexport const collectLabels = async (allShapes, convert) => {\n    const labels = new Map();\n    for (const s of allShapes) {\n        if (s.shapeType === \"Equation\") {\n            const shapeName = getAdValueAsString(s.name);\n            const svg = await tex2svg(s, convert);\n            if (svg.isErr()) {\n                return err({\n                    errorType: \"SubstanceError\",\n                    tag: \"Fatal\",\n                    message: svg.error,\n                });\n            }\n            const { body, width, height, ascent, descent } = svg.value;\n            // Instead of directly overwriting the properties, cache them temporarily\n            // NOTE: in the case of empty strings, `tex2svg` returns infinity sometimes. Convert to 0 to avoid NaNs in such cases.\n            const label = equationData(width === Infinity ? 0 : width, height === Infinity ? 0 : height, ascent, descent, body);\n            labels.set(shapeName, label);\n        }\n        else if (s.shapeType === \"Text\") {\n            const shapeName = getAdValueAsString(s.name);\n            let label;\n            // Use canvas to measure text data\n            const measure = measureText(getAdValueAsString(s.string), toFontRule(s));\n            // If the width and height are defined, the renderer will render the text. `actualDescent` is currently not used in rendering.\n            if (measure.width && measure.height) {\n                label = textData(measure.width, measure.height, measure.actualDescent, measure.actualAscent);\n            }\n            else {\n                label = textData(0, 0, 0, 0);\n            }\n            labels.set(shapeName, label);\n        }\n        else if (s.shapeType === \"Group\") {\n            const subShapes = getValueAsShapeList(s.shapes);\n            const subLabels = await collectLabels(subShapes, convert);\n            if (subLabels.isErr()) {\n                return subLabels;\n            }\n            for (const [key, value] of subLabels.value.entries()) {\n                labels.set(key, value);\n            }\n        }\n    }\n    return ok(labels);\n};\n/**\n *\n * @param text the content of the text\n * @param font the CSS font rule for the text\n *\n * NOTE: the `font` CSS rule -> https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @returns `TextMeasurement` object and includes data such as `width` and `height` of the text.\n */\nexport function measureText(text, font) {\n    const measureTextElement = document.createElement(\"canvas\");\n    const measureTextContext = measureTextElement.getContext(\"2d\");\n    measureTextContext.textBaseline = \"alphabetic\";\n    measureTextContext.font = font;\n    const measurements = measureTextContext.measureText(text);\n    measureTextElement.remove();\n    return {\n        width: Math.abs(measurements.actualBoundingBoxLeft) +\n            Math.abs(measurements.actualBoundingBoxRight),\n        height: Math.abs(measurements.actualBoundingBoxAscent) +\n            Math.abs(measurements.actualBoundingBoxDescent),\n        actualDescent: Math.abs(measurements.actualBoundingBoxDescent),\n        actualAscent: Math.abs(measurements.actualBoundingBoxAscent),\n    };\n}\nconst setPendingProperty = (xs, inputs, before, after) => {\n    if (typeof before.contents !== \"number\" && before.contents.tag === \"Var\") {\n        const { index, meta } = safe(inputs.get(before.contents), \"missing input\");\n        if (meta.init.tag === \"Pending\")\n            xs[index] = after.contents;\n    }\n};\nconst insertPendingHelper = (shapes, xs, labelCache, inputs) => {\n    for (const s of shapes) {\n        if (s.shapeType === \"Group\") {\n            const subShapes = getValueAsShapeList(s.shapes);\n            insertPendingHelper(subShapes, xs, labelCache, inputs);\n        }\n        else if (s.shapeType === \"Equation\") {\n            const labelData = safe(labelCache.get(s.name.contents), \"missing label\");\n            if (labelData.tag !== \"EquationData\")\n                throw Error(`for ${s.shapeType} ${s.name.contents} got unexpected ${labelData.tag}`);\n            setPendingProperty(xs, inputs, s.width, labelData.width);\n            setPendingProperty(xs, inputs, s.height, labelData.height);\n            setPendingProperty(xs, inputs, s.ascent, labelData.ascent);\n            setPendingProperty(xs, inputs, s.descent, labelData.descent);\n        }\n        else if (s.shapeType === \"Text\") {\n            const labelData = safe(labelCache.get(s.name.contents), \"missing label\");\n            if (labelData.tag !== \"TextData\")\n                throw Error(`for ${s.shapeType} ${s.name.contents} got unexpected ${labelData.tag}`);\n            setPendingProperty(xs, inputs, s.width, labelData.width);\n            setPendingProperty(xs, inputs, s.height, labelData.height);\n            setPendingProperty(xs, inputs, s.ascent, labelData.ascent);\n            setPendingProperty(xs, inputs, s.descent, labelData.descent);\n        }\n    }\n};\nexport const insertPending = (state) => {\n    const varyingValues = [...state.varyingValues];\n    const inputs = new Map(state.inputs.map(({ handle, meta }, index) => [handle, { index, meta }]));\n    insertPendingHelper(state.shapes, varyingValues, state.labelCache, inputs);\n    return { ...state, varyingValues };\n};\n//# sourceMappingURL=CollectLabels.js.map"],"names":["mathjaxInit","__name","adaptor","browserAdaptor","RegisterHTMLHandler","tex","TeX","AllPackages","jax","err","svg","SVG","html","mathjax","input","node","ok","error","parseFontSize","fontSize","regex","match","number","unit","toPxFontSize","tex2svg","properties","convert","resolve","contents","getAdValueAsString","output","body","viewBox","viewBoxArr","width","height","d","exH","parsedFontSize","em_to_px","n","scaledWidth","scaledHeight","scaledDescent","scaledAscent","floatV","textData","descent","ascent","equationData","rendered","toFontRule","fontFamily","fontStretch","fontStyle","fontVariant","fontWeight","lineHeight","fontSpec","collectLabels","allShapes","labels","s","shapeName","label","measure","measureText","subShapes","getValueAsShapeList","subLabels","key","value","text","font","measureTextElement","measureTextContext","measurements","setPendingProperty","xs","inputs","before","after","index","meta","safe","insertPendingHelper","shapes","labelCache","labelData","insertPending","state","varyingValues","handle"],"mappings":"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"}