canvas {
   width = 800
   height = 700
}

global {
   color shapeColor = #0003
   color closestColor = #66d
   color silhouetteColor = #0a0
   color rayColor = #ff6600
   color labelColor = #000
   color labelStrokeColor = #fff
   color labelStrokeWidth = 6
   color labelFont = "monospace"
   color labelFontSize = "24px"
   scalar labelFontSizeS = 24

   scalar strokeWidth = 2
   scalar arrowSize = 40
   scalar arrowWidth = 2.5
   scalar perpSize = 14

   scalar boxWidth = canvas.width/3
   scalar boxHeight = canvas.height/2
   scalar boxPadding = 20
}

-- Rules for drawing each type of shape

forall Point p {
   vec2 p.x = (?,?) -- location

   shape p.icon = Circle {
      center: p.x
      r: 5
      strokeWidth: 1
      fillColor: #000000ff
   } 
}

forall Ray r {
   vec2 r.o = (?,?) -- origin
   vec2 r.d = circleRandom() -- direction

   r.icon = Line {
      start: r.o
      end: r.o + global.arrowSize*r.d
      strokeColor: #000
      strokeWidth: global.arrowWidth
      endArrowhead: "straight"
      endArrowheadSize: .5
   }
}

forall Point p; Ray r
where r := rayFrom(p) {
   override r.o = p.x
}

forall Shape S {
   shape S.box = Rectangle {
      center: (?,?)
      width: global.boxWidth
      height: global.boxHeight
      fillColor: rgba(.9,.9,.9,1)
      strokeColor: #fff
      strokeWidth: 4
      ensureOnCanvas: false
   }

   shape S.boxLabel = Text {
      string: "Shape"
      center: ( S.box.center[0], S.box.center[1] + global.boxHeight/2 - global.labelFontSizeS/2 - global.boxPadding )
      ensureOnCanvas: false
      fillColor: global.labelColor
      fontFamily: global.labelFont
      fontSize: global.labelFontSize
      strokeWidth: global.labelStrokeWidth
      strokeColor: global.labelStrokeColor
      paintOrder: "stroke"
   }
}

forall Line L {
   shape L.icon = Line {
      start: (?,?)
      end: (?,?)
      strokeWidth: 5
      strokeColor: global.shapeColor
   }

   override L.boxLabel.string = "Line"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override L.box.center = (-W+w,-H+h)/2 + (w,h)
}

forall Rectangle R {
   shape R.icon = Rectangle {
      center: (?, ?)
      width: random(40,150)
      height: random(40,150)
      strokeWidth: 1
      fillColor: global.shapeColor
   }

   override R.boxLabel.string = "Rectangle"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override R.box.center = (-W+w,-H+h)/2 + (w,0)
}

forall Polyline M {
   vec2 p0 = (?,?)
   vec2 p1 = (?,?)
   vec2 p2 = (?,?)
   vec2 p3 = (?,?)
   vec2 p4 = (?,?)
   
   shape M.icon = Polyline {
      points: [ p0, p1, p2, p3, p4 ]
      strokeWidth: 5.0
      strokeLinejoin: "round"
      strokeColor: global.shapeColor
   }

   scalar L0 = norm(p1-p0)
   scalar L1 = norm(p2-p1)
   scalar L2 = norm(p3-p2)
   scalar L3 = norm(p4-p3)
   ensure L0 > 30
   ensure L1 > 30
   ensure L2 > 30
   ensure L3 > 30
   ensure L0 < 80
   ensure L1 < 80
   ensure L2 < 80
   ensure L3 < 80

   scalar theta0 = angleBetween(p1-p0,p2-p1)
   scalar theta1 = angleBetween(p2-p1,p3-p2)
   scalar theta2 = angleBetween(p3-p2,p4-p3)
   ensure theta0 > MathPI()/6
   ensure theta1 > MathPI()/6
   ensure theta2 > MathPI()/6

   override M.boxLabel.string = "Polyline"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override M.box.center = (-W+w,-H+h)/2 + (2*w,h)
}

forall Polygon P {
   vec2 p0 = (?,?)
   vec2 p1 = (?,?)
   vec2 p2 = (?,?)
   vec2 p3 = (?,?)
   
   shape P.icon = Polygon {
      points: [ p0, p1, p2, p3 ]
      fillColor: global.shapeColor
   }

   vec2 e01 = p1-p0
   vec2 e12 = p2-p1
   vec2 e23 = p3-p2
   vec2 e30 = p0-p3
   scalar theta0 = angleBetween( e01, -e12 )
   scalar theta1 = angleBetween( e12, -e23 )
   scalar theta2 = angleBetween( e23, -e30 )
   scalar theta3 = angleBetween( e30, -e01 )
   ensure theta0 > toRadians(30)
   ensure theta1 > toRadians(30)
   ensure theta2 > toRadians(30)
   ensure theta3 > toRadians(30)

   ensure abs(cross2D( e01, -e12 )) > 50
   ensure theta0 + theta1 + theta2 + theta3 == 2*MathPI()

   override P.boxLabel.string = "Polygon"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override P.box.center = (-W+w,-H+h)/2 + (0,h)
}

forall Circle C {
   shape C.icon = Circle {
      center: (?,?)
      r: random(30,80)
      fillColor: global.shapeColor
   }

   override C.boxLabel.string = "Circle"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override C.box.center = (-W+w,-H+h)/2
}

forall Point q; Shape S; Point p
where q := closestPoint(S,p) {
   ensure contains( S.box, p.icon, global.boxPadding )
}

forall Ellipse E {
   shape E.icon = Ellipse {
      center: (?,?)
      rx: random(20,100)
      ry: random(20,100)
      fillColor: global.shapeColor
   }

   override E.boxLabel.string = "Ellipse"
   scalar W = canvas.width
   scalar H = canvas.height
   scalar w = global.boxWidth
   scalar h = global.boxHeight
   override E.box.center = (-W+w,-H+h)/2 + (2*w,0)
}

forall Group G {

   vec2 p0 = (?,?)
   vec2 p1 = (?,?)
   vec2 p2 = (?,?)

   shape s1 = Circle {
      r: random(30,70)
   }
   shape s2 = Rectangle {
      width: random(50,150)
      height: random(50,150)
   }
   shape s3 = Polygon {
      points: [p0,p1,p2]
   }

   vec2 u = p1-p0
   vec2 v = p2-p1
   vec2 w = p0-p2
   ensure angleBetween(-u,v) > MathPI()/6
   ensure angleBetween(-v,w) > MathPI()/6
   ensure angleBetween(-w,u) > MathPI()/6

   shape G.icon = Group {
      shapes: [s1,s2,s3]
   }

   shape bbox = Rectangle {
      fillColor: none()
      strokeColor: #ddd
      strokeDasharray: "10 8"
      strokeWidth: 2.0
      center: (0,0)
      width: random(300,500)
      height: random(300,500)
   }
   ensure contains( bbox, s1 )
   ensure contains( bbox, s2 )
   ensure contains( bbox, s3 )
   ensure contains( G.icon, bbox )

}

forall Shape S {
   ensure contains( S.box, S.icon, global.boxPadding )
}

-- Rules for geometric queries

forall Point q; Shape S; Point p
where q := closestPoint(S,p)
{
   vec2 y = closestPoint( S.icon, p.x )

   override q.x = y
   override q.icon.fillColor = #fff
   override q.icon.strokeColor = global.closestColor
   override q.icon.strokeWidth = global.strokeWidth
   override q.icon.ensureOnCanvas = false

   shape q.querySegment = Line {
      start: p.x
      end: y
      strokeColor: global.closestColor
      strokeWidth: global.strokeWidth
      ensureOnCanvas: false
   }
}

forall Point q; Shape S; Point p
where q := closestSilhouettePoint(S,p)
{
   vec2 y = closestSilhouettePoint( S.icon, p.x )

   override q.x = y
   override q.icon.fillColor = #fff
   override q.icon.strokeColor = global.silhouetteColor
   override q.icon.strokeWidth = global.strokeWidth
   override q.icon.ensureOnCanvas = false

   shape q.querySegment = Line {
      start: p.x
      end: y
      strokeColor: global.silhouetteColor
      strokeWidth: global.strokeWidth
      ensureOnCanvas: false
   }
}

forall Point q; Shape S; Ray r
where q := rayIntersect(S,r)
{
   vec2 y = rayIntersect( S.icon, r.o, r.d )
   vec2 q.n = rayIntersectNormal( S.icon, r.o, r.d )

   override q.x = y
   override q.icon.fillColor = #fff
   override q.icon.strokeColor = global.rayColor
   override q.icon.strokeWidth = global.strokeWidth
   override q.icon.ensureOnCanvas = false

   shape q.raySegment = Line {
      start: r.o
      end: y
      strokeColor: global.rayColor
      strokeWidth: global.strokeWidth
      style: "dashed"
      strokeDasharray: "8,6"
      ensureOnCanvas: false
   }

   shape q.normalArrow = Line {
      start: y
      end: y + global.arrowSize*q.n
      strokeColor: global.rayColor
      strokeWidth: global.arrowWidth
      endArrowhead: "straight"
      endArrowheadSize: .5 * norm(q.n)
      ensureOnCanvas: false
   }

   vec2 u = global.perpSize*q.n
   vec2 v = global.perpSize*rot90(q.n)
   vec2 r.h = (0,0)
   shape perpMark = Polyline {
      points: [ y+u+r.h, y+u+v+r.h, y+v+r.h ]
      ensureOnCanvas: false
      fillColor: none()
      strokeColor: global.rayColor
      strokeWidth: global.strokeWidth
   }
}

forall Point q; Conic C; Ray r
where q := rayIntersect(C,r) {
   override r.h = -.15*global.perpSize*q.n
}

-- Layering

forall Shape S {
   layer S.icon above S.box
}

forall Point p; Shape S {
   layer p.icon above S.icon
}

forall Ray r; Shape S {
   layer r.icon above S.box
}

forall Point q; Shape S; Point p
where q := closestPoint(S,p) {
   layer p.icon above q.querySegment
   layer q.icon above q.querySegment
}

forall Point q; Shape S; Point p
where q := closestSilhouettePoint(S,p) {
   layer p.icon above q.querySegment
   layer q.icon above q.querySegment
}

forall Point p; Ray r {
   layer p.icon above r.icon
}

forall Point p; Point q; Ray r; Shape S
where q := rayIntersect(S,r) {
   layer q.icon above q.normalArrow
   layer q.icon above q.raySegment
}

forall Point q; Ray r; Shape S
where q := rayIntersect(S,r) {
   layer r.icon above q.raySegment
}

