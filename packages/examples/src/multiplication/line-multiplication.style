canvas {
   width = 480
   height = 480

   shape background = Rectangle {
      center: (0,0)
      width: canvas.width
      height: canvas.height
      fillColor: #000
   }
}

global {
   scalar warpWidth = 40
   scalar dotRadius = 5
   scalar lineLength = .8 * canvas.width / (2*sqrt(2))
}

colors {
   color yellow = #fc0
   color blue = #88f
   color red = #f44
}

forall Line L {
   r = global.lineLength
   scalar L.s = 1
   vec2 u = (1,L.s)/sqrt(2)
   vec2 v = (-L.s,1)/sqrt(2)
   scalar L.h = 0
   scalar a = 15

   shape L.icon = Line {
      start: -(r+a)*u + L.h*v
      end: (r+a)*u + L.h*v
      strokeWidth: 2
      strokeColor: #fff
   }
   layer L.icon above canvas.background
}

forall SecondLine L {
   override L.s = -1
}

forall FirstOnes L {
   override L.h = -global.lineLength + global.warpWidth*(match_id - 1)
}

forall FirstTens L {
   override L.h = global.lineLength - global.warpWidth*(match_id - 1)
}

forall SecondOnes L {
   override L.h = global.lineLength - global.warpWidth*(match_id - 1)
}

forall SecondTens L {
   override L.h = -global.lineLength + global.warpWidth*(match_id - 1)
}

forall FirstTens L1; SecondTens L2 {
   vec2 x = lineLineIntersection( L1.icon.start, L1.icon.end, L2.icon.start, L2.icon.end )

   shape dot = Circle {
      center: x
      r: global.dotRadius
      fillColor: colors.yellow
   }
   layer dot above canvas.background
   layer dot above L1.icon
   layer dot above L2.icon
}

forall FirstTens L1; SecondOnes L2 {
   vec2 x = lineLineIntersection( L1.icon.start, L1.icon.end, L2.icon.start, L2.icon.end )

   shape dot = Circle {
      center: x
      r: global.dotRadius
      fillColor: colors.blue
   }
   layer dot above canvas.background
   layer dot above L1.icon
   layer dot above L2.icon
}

forall SecondTens L1; FirstOnes L2 {
   vec2 x = lineLineIntersection( L1.icon.start, L1.icon.end, L2.icon.start, L2.icon.end )

   shape dot = Circle {
      center: x
      r: global.dotRadius
      fillColor: colors.blue
   }
   layer dot above canvas.background
   layer dot above L1.icon
   layer dot above L2.icon
}

forall FirstOnes L1; SecondOnes L2 {
   vec2 x = lineLineIntersection( L1.icon.start, L1.icon.end, L2.icon.start, L2.icon.end )

   shape dot = Circle {
      center: x
      r: global.dotRadius
      fillColor: colors.red
   }
   layer dot above canvas.background
   layer dot above L1.icon
   layer dot above L2.icon
}

collect FirstOnes L into Ls {
   global.nFirstOnes = numberof Ls
}
collect SecondOnes L into Ls {
   global.nSecondOnes = numberof Ls
}
collect FirstTens L into Ls {
   global.nFirstTens = numberof Ls
}
collect SecondTens L into Ls {
   global.nSecondTens = numberof Ls
}

product {
   scalar r = global.lineLength
   scalar w = global.warpWidth
   scalar d = .8*canvas.width/2
   scalar pad = 50
   scalar alpha = .5
   scalar round = 40
   vec2 u = (1,1)/sqrt(2)
   vec2 v = (1,-1)/sqrt(2)

   scalar n1 = (global.nFirstOnes - 1)
   scalar m1 = (global.nSecondOnes - 1)

   scalar n10 = (global.nFirstTens - 1)
   scalar m10 = (global.nSecondTens - 1)

   shape hundredsBox = Rectangle{
      center: ( -d, 0 ) + (m10*w*u + n10*w*v)/2
      width: w*n10 + pad
      height: w*m10 + pad
      cornerRadius: round
      fillColor: none()
      strokeColor: colors.yellow
      strokeWidth: 4
      opacity: alpha
      rotation: 45
      ensureOnCanvas: false
   }
   layer hundredsBox above canvas.background

   shape onesBox = Rectangle{
      center: ( d, 0 ) - (m1*w*u + n1*w*v)/2
      width: w*n1 + pad
      height: w*m1 + pad
      cornerRadius: round
      fillColor: none()
      strokeColor: colors.red
      strokeWidth: 4
      opacity: alpha
      rotation: 45
      ensureOnCanvas: false
   }
   layer onesBox above canvas.background

   shape tensABBox = Rectangle{
      center: ( 0, d ) + (n10*w*v - m1*w*u)/2
      width: w*n10 + pad
      height: w*m1 + pad
      cornerRadius: round
      fillColor: none()
      strokeColor: colors.blue
      strokeWidth: 4
      opacity: alpha
      rotation: 45
      ensureOnCanvas: false
   }
   layer tensABBox above canvas.background

   shape tendsBABox = Rectangle{
      center: ( 0, -d ) - (n1*w*v - m10*w*u)/2
      width: w*n1 + pad
      height: w*m10 + pad
      cornerRadius: round
      fillColor: none()
      strokeColor: colors.blue
      strokeWidth: 4
      opacity: alpha
      rotation: 45
      ensureOnCanvas: false
   }
   layer tendsBABox above canvas.background
}




