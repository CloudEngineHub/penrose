-- diagram dimensions (in px)
canvas {
   width = 320
   height = 240
}

-- some colors re-used throughout
Colors {
   color black = rgba(0,0,0,1)
   color white = rgba(1,1,1,1)
   color darkGray = rgba(.5,.5,.5,1)
   color lightGray = rgba(.9,.9,.9,1)
}

-- global shapes and constants
Global {
   -- default appearance for label text
   string labelFont = "Palatino"
   string labelSize = "12px"
   color labelColor = Colors.black

   -- line thickness for basic shapes
   scalar sphereStrokeWidth = 1.5
   scalar domainStrokeWidth = 2

   -- invisible box around the canvas (used for reference/constraints)
   shape box = Rectangle {
      center: (0,0)
      width: canvas.width
      height: canvas.height
      fillColor: none()
      strokeColor: none()
   }

   -- style of lines along a walk
   -- (set color to none() to disable)
   color walkColor = rgba( 0, 0, .7, 1 )
   color walkStrokeWidth = 2.0

   -- draw the domain as a polygon with some random variation, by
   -- perturbing the vertices of a hexagon by some bounded amount
   -- Note: if the domain shape is changed to something else (like
   -- an ellipse or a rectangle), things _should_ still work as
   -- expected, since later methods just make a call to `signedDistance`
   -- to determine ball radii.  However, signed distance may not yet
   -- be supported for all shapes (like arbitrary BÃ©zier curves).
   vec2 p0 = (?,?)
   vec2 p1 = (?,?)
   vec2 p2 = (?,?)
   vec2 p3 = (?,?)
   vec2 p4 = (?,?)
   vec2 p5 = (?,?)
   scalar maxPerturbation = 30.
   ensure lessThan( norm(p0), maxPerturbation )
   ensure lessThan( norm(p1), maxPerturbation )
   ensure lessThan( norm(p2), maxPerturbation )
   ensure lessThan( norm(p3), maxPerturbation )
   ensure lessThan( norm(p4), maxPerturbation )
   ensure lessThan( norm(p5), maxPerturbation )
   shape domain = Polygon {
      points: ( (150,-110)+p0, (0,-110)+p1, (-150,-110)+p2, (-150,110)+p3, (0,110)+p4, (150,110)+p5)
      fillColor: Colors.lightGray
      strokeColor: Colors.darkGray
      strokeWidth: Global.domainStrokeWidth
      ensureOnCanvas: false
   }
   ensure contains( Global.box, Global.domain ) -- make sure the domain shape stays on the canvas
   layer box below domain
}

-- label the domain if it was assigned a label in the Substance program
forall Domain U
where U has label {
   shape U.labelText = Text {
      string: U.label
      center: (?,?)
      fontSize: Global.labelSize
      fontFamily: Global.labelFont
      fillColor: Colors.darkGray
   }

   ensure lessThan( signedDistance( Global.domain, U.labelText.center ), -10. )

   layer U.labelText above Global.domain -- make sure the label doesn't get covered by the domain shape
}

-- draw each point as a small dot
forall Point p {
   vec2 p.location = (?,?) -- location on the canvas

   -- The `dot` shape represents the sample point associated
   -- with the ball.  Ordinarily this point will be at the
   -- center of the ball, but in general it could be at a
   -- different location (e.g., for an off-center walk).
   shape p.dot = Circle {
      center: p.location
      r: 2.5
      fillColor: Colors.black
      ensureOnCanvas: false
   }
}

-- TODO We will be able to make more of the Style program generic across
-- TODO different types of subdomains (balls and stars) by giving a generic
-- TODO name like "interior" to each subdomain.  Rules that need to sample
-- TODO points in these subdomains can then use "ensure contains" rather than
-- TODO explicit calculations based on circular disks.

-- draw each Ball as the largest ball tangent to the domain boundary
forall Ball B {

   -- Make sure the ball is inside the problem domain by
   -- setting its radius to (minus) the signed distance to
   -- the domain boundary.  This value is negated since, by
   -- convention, points inside the domain have negative
   -- signed distance.
   vec2 B.center = (?,?)
   scalar B.radius = -signedDistance( Global.domain, B.center )
   ensure greaterThan( B.radius, 0. )

   -- The `ball` shape is a flat-shaded semi-transparent
   -- disk that determines the color of the ball.
   -- The ball radius equals the distance from the
   -- ball center to the closest point on the domain boundary
   -- (just as in the WoS algorithm!).  We also subtract half
   -- the stroke widths so that visually the ball makes perfect
   -- tangential contact with the domain boundary.
   -- Note that we don't need to
   -- explicitly enforce that the ball remains on the canvas,
   -- since the domain shape already has an onCanvas constraint,
   -- and the balls are always contained in the domain shape, by
   -- construction.
   shape B.ball = Circle {
      center: B.center
      r: B.radius - Global.sphereStrokeWidth/2 - Global.domainStrokeWidth/2.
      fillColor: rgba( .2, .8, .2, .15 )
      strokeColor: none()
      ensureOnCanvas: false
   }

   -- The `sphere` shape represents the boundary of the ball,
   -- and is drawn as an empty circle with a thick line.
   shape B.sphere = Circle {
      center: B.center
      r: B.radius
      fillColor: none()
      strokeColor: rgba( .4, .5, .4, 1 )
      strokeWidth: Global.sphereStrokeWidth
      ensureOnCanvas: false
   }

   -- To give the balls a three-dimensional appearance, blend
   -- a shading image behind the flat colored disk.
   shape B.shading = Image {
      center: B.center
      width: B.radius * 2.0
      height: B.radius * 2.0
      href: "walk-on-spheres-ball.svg"
      ensureOnCanvas: false
   }

   -- Make sure all components of the ball get drawn in the
   -- proper order, and are not covered up by the domain shape.
   layer B.shading above Global.domain
   layer B.ball above B.shading
   layer B.sphere above B.ball

   -- This constant determines how much balls shrink from one
   -- step of the walk to the next.  We define it as a named
   -- constant so that specialized types of balls (say, those
   -- coming from a nested walk) can use a different factor.
   scalar B.shrinkFactor = .55
}

-- Make sure the domain's label isn't covered up by a ball.
forall Ball B; Domain U
where U has label {
   scalar padding = 10.
   ensure disjoint( U.labelText, B.sphere, padding )
}

-- If a ball is constructed around a point, center it around that point
forall Point p; Ball B
where B := ballAround( p ) {
   override B.center = p.location
   layer p.dot above B.ball
}

-- For a step of an off-centered walk, we want to clearly
-- indicate that the sample point may not be at the ball center.
forall Ball B; Point p
where B := ballAround(p); isOffCenter(B) {

   -- We can no longer just copy the ball center from the point center,
   -- but will instead let the layout engine determine its location.
   override B.center = (?,?)

   -- Still keep the center within the middle 75% of the ball, since
   -- the dot may be hard to see if it gets too close to the boundary
   -- (especially for very small balls).
   ensure lessThan( norm(B.center - p.location), .75*B.radius )
}

-- If a point has a label, draw a label string near the dot.
forall Point p
where p has label {
   shape p.labelText = Text {
      string: p.label
      center: (?,?) -- the layout engine will determine the exact placement
      fontSize: Global.labelSize
      fontFamily: Global.labelFont
      fontStyle: "italic"
      fillColor: Global.labelColor
      strokeColor: Colors.white
      strokeWidth: 2.5
      strokeLinejoin: "round"
      paintOrder: "stroke"
   }

   -- We want the label to be near the dot, but don't want it
   -- to overlap the dot (which makes it hard to read).
   encourage near( p.labelText, p.dot )
   ensure disjoint( p.labelText, p.dot, 2. )
}

-- Make sure a point's label doesn't get covered by a ball
-- containing it, by layering it above the topmost ball shape.
forall Point p; Ball B
where B := ballAround( p ) {
   layer p.labelText above B.sphere
}

-- Draw nested steps of a walk in a different style.
forall Ball B; Point p
where isNested( B ); B := ballAround( p ) {
   -- Change to a color palette that is more white & opaque.
   override B.ball.fillColor = rgba( 1, 1, 1, .4 )
   override B.sphere.strokeColor = Colors.white
   override p.dot.fillColor = Colors.white

   -- Since nested walks are usually secondary in the overall
   -- diagram, draw them smaller by making them shrink faster.
   override B.shrinkFactor = .7
}

-- TODO for completeness, we should also define a rule for nested Stars
-- forall Ball B; Point p
-- where isNested( B ); B := ballAround( p ) {
   -- TODO
-- }

-- If a point p1 is sampled from the boundary of a ball around p0,
-- place the sampled point on the corresponding sphere around p0.
forall Ball B0; Point p0; Point p1
where p1 := sampleBoundary( B0 ); B0 := ballAround( p0 ) {
   ensure equal( norm(p1.location - B0.center), B0.radius )
}

-- Adjust the drawing for consecutive steps x0, x1 along a walk on spheres,
-- where B0, B1 are the associated spheres.
forall Ball B0; Ball B1; Point x0; Point x1
where x1 := sampleBoundary( B0 ); B0 := ballAround( x0 ); B1 := ballAround( x1 ) {
   -- draw later steps of a walk as smaller balls (which is often, but
   -- not always, the behavior of the WoS algorithm)
   ensure equal( B1.radius, B1.shrinkFactor * B0.radius )

   -- It's typically easier to see labels, etc., if later, smaller
   -- balls are drawn on top of earlier, bigger ones.
   layer B1.shading above B0.sphere
}

-- Draw a line between the consecutive points on a walk on spheres
forall Point x0; Point x1; Ball B0; Ball B1
where x1 := sampleBoundary( B0 ); B0 := ballAround( x0 ); B1 := ballAround( x1 ) {

   shape walkLine = Line {
      start: x0.location
      end: x1.location
      strokeColor: Global.walkColor
      strokeWidth: Global.walkStrokeWidth
   }
   layer walkLine above Global.domain

   -- Use layering to help clarify the direction of the walk.
   layer walkLine above B0.shading
   layer walkLine below B1.shading
}

-- Draw a line between the consecutive points on a walk on stars
forall Point x0; Point x1; Star St0; Star St1
where x1 := sampleBoundary( St0 ); St0 := starAround( x0 ); St1 := starAround( x1 ) {

   -- TODO we *might* be able to eliminate redundancy with the previous rule by
   -- TODO changing ballAround()/starAround() to subdomainAround().  This all depends
   -- TODO on whether the Style compiler will separately match the two rules
   -- TODO    Ball B  where B  := subdomainAround(p)
   -- TODO    Star St where St := subdomainAround(p)
   -- TODO (and I don't immediately see why it shouldn't...).  In other words, unlike
   -- TODO C++, we can effectively "overload" rules based on "return type."  This change
   -- TODO would also just simplify and clean up our Domain schema, since we no longer
   -- TODO have to carefully match the subdomain type with the method used to construct
   -- TODO the subdomain.

   shape walkLine = Line {
      start: x0.location
      end: x1.location
      strokeColor: Global.walkColor
      strokeWidth: Global.walkStrokeWidth
   }
   layer walkLine above Global.domain

   -- Use layering to help clarify the direction of the walk.
   layer walkLine above St0.shading
   layer walkLine below St1.shading
}

-- The next step in a walk might also be sampled from
-- the ball interior (e.g., to estimate a value expressed
-- in terms of a source term).
forall Point y; Point x; Ball Bx; Ball By
where y := sampleInterior( Bx ); Bx := ballAround( x ); By := ballAround( y ) {

   -- Put the center of the next ball somewhere inside
   -- the current ball, between 20% and 80% of the
   -- radial distance from the center.
   scalar R = norm(y.location - Bx.center)
   ensure inRange( R, .2*B.radius, .8*B.radius )

   -- Since these samples tend to be the start of a
   -- secondary, "nested" walk, we'll draw this ball
   -- much smaller than its parent in the walk.
   override By.radius = .1 * Bx.radius

   -- Make sure the smaller ball gets drawn on top
   -- of the bigger ball by putting the lowest layer
   -- of the former above the highest layer of the latter.
   layer By.shading above Bx.sphere
}

-- Draw sample points that are used to estimate the source term
-- as just dots contained in the ball of interest.  These sample
-- points are different from steps of a walk, since we never
-- need to consider a ball around these points (and hence do not
-- want to draw one).
forall Point p; Ball B
where p := sampleInterior( B ); isSourceSample( p ) {

   -- Draw source samples in a different style
   override p.location = (?,?)
   override p.dot.r = 2
   override p.dot.fillColor = Colors.white
   override p.dot.strokeColor = Colors.black
   override p.dot.strokeWidth = 1

   -- Put the sample point somewhere between 20% and
   -- 80% away from the center, so that it's clearly visible
   -- and doesn't run into the center point or the boundary.
   scalar R = norm( p.location - B.center )
   ensure inRange( R, .2*B.radius, .8*B.radius )

   -- Make sure the dot is not covered by the ball.
   layer p.dot above B.ball
}

-- Label a sample point if a label string was specified
-- in the Substance program.
forall Point p
where p has label {
   override p.labelText = Text {
      string: p.label
      center: (?,?)
      fontSize: Global.labelSize
      fontFamily: Global.labelFont
      fontStyle: "italic"
      fillColor: Global.labelColor
      strokeColor: Colors.white
      strokeWidth: 2.5
      strokeLinejoin: "round"
      paintOrder: "stroke"
   }

   -- Put the label near the dot, but don't allow
   -- it to cover up the dot (or vice versa).
   scalar padding = 2.0
   encourage near( p.labelText, p.dot )
   ensure disjoint( p.labelText, p.dot, padding )
}

-- If this sample was drawn from a ball around x,
-- make sure the sample's label is drawn on top
-- of that ball.
forall Point p; Ball B
where p has label; p := sampleInterior( B ) {
   layer p.labelText above B.sphere
}

-- Also make sure the sample point isn't covered
-- by the next or previous shading in the walk
forall Point x0; Point x1; Point y0; Ball B0; Ball B1
where x1 := sampleBoundary(B0); y0 := sampleInterior(B0); B0 := ballAround(x0); B1 := ballAround(x1) {
   ensure disjoint( B1.sphere, y0.dot )
}
forall Point x0; Point x1; Point y1; Ball B0; Ball B1
where x1 := sampleBoundary(B0); y1 := sampleInterior(B1); B0 := ballAround(x0); B1 := ballAround(x1) {
   ensure disjoint( B0.sphere, y1.dot )
}

