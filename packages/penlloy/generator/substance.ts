import { xml2js, xml2json } from "xml-js";
import { RawAlloyExported } from "../types/RawAlloyInstance.js";
import { safe, safeArray } from "../utils/Utils.js";
import {
  AlloyInstanceRel,
  AlloyInstanceSig,
  AlloyInstance,
} from "../types/AlloyInstance.js";
import {
  toPenroseObjectName,
  toPenroseRelationName,
  toPenroseTypeName,
} from "../utils/names.js";

export const compileInstance = (instXml: string): AlloyInstance => {
  const raw = xml2js(instXml, { compact: true }) as RawAlloyExported;

  const instance = raw.alloy.instance;

  const idSigMap = new Map<number, AlloyInstanceSig>();

  for (const rawSig of safeArray(instance.sig)) {
    const id = Number(rawSig._attributes.ID);
    const name = rawSig._attributes.label;
    const atoms = safeArray(rawSig.atom).map((atom) => atom._attributes.label);

    idSigMap.set(id, { name, id, atoms });
  }

  const rels: AlloyInstanceRel[] = [];

  for (const rawField of safeArray(instance.field)) {
    const name = rawField._attributes.label;
    const belongsToId = Number(rawField._attributes.parentID);
    const belongsTo = safe(idSigMap.get(belongsToId)).name;
    const tuples = safeArray(rawField.tuple).map((tuple) =>
      safeArray(tuple.atom).map((atom) => atom._attributes.label),
    );
    rels.push({ name, belongsTo, tuples });
  }

  return {
    sigs: [...idSigMap.values()],
    rels,
  };
};

export const translateToSubstance = (inst: AlloyInstance): string => {
  const prog: string[] = ["-- Generated by Penlloy", "-- Sigs"];

  const sigLines = inst.sigs
    .filter((sigs) => sigs.atoms.length > 0)
    .map((sig) => {
      const typeName = toPenroseTypeName(sig.name);
      const objNames = sig.atoms.map(toPenroseObjectName);

      return `${typeName} ${objNames.join(",")}`;
    });

  prog.push(...sigLines);
  prog.push("-- Fields");

  const funcCalls: string[] = [];

  inst.rels.map((rel) => {
    const { name, belongsTo, tuples } = rel;
    const relName = toPenroseRelationName(belongsTo, name);

    const argLines = tuples.map((tuple) =>
      tuple.map(toPenroseObjectName).join(","),
    );

    argLines.map((argLine) => {
      funcCalls.push(`${relName}(${argLine})`);
    });
  });

  const relLines = funcCalls.map((funcCall, i) => `Rel r${i} := ${funcCall}`);

  prog.push(...relLines);
  prog.push("-- Ends");

  return prog.join("\n");
};
